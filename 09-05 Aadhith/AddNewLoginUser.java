package LibraryDatabase;

import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author wissam
 */
public class AddNewLoginUser extends javax.swing.JFrame {

    /**
     * Creates new form AddEmployee
     */
    myDBCon dbCon;
    ResultSet rs;

    // encryption of password is performed according to the customized encryption function below 
    public String passEncryption(String password)
    {   
        char[] pass = password.toCharArray();
        char[] encrypt = new char[pass.length];
        
        String skey = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        char[] key = skey.toCharArray();
        
        for (int i = 0; i < pass.length; i++)
        {
            int index = skey.indexOf(pass[i]);
            index = (index + 37) % key.length;
            encrypt[i] = key[index];
        }
        String encrypted = String.valueOf(encrypt);
        
        // returns encrypted function
        return encrypted;
    }
    
    
    public AddNewLoginUser() {
        initComponents();
        txtPassword.setEchoChar('*');
        txtConfirmPassword.setEchoChar('*');
        // center form in screen 
        this.setLocationRelativeTo(null);
      
        // set all error labels to invisible
        lblUsernameError.setVisible(false);
        lblPasswordError.setVisible(false);
        lblConfirmPasswordError.setVisible(false);
        lblNameError.setVisible(false);
        dbCon = new myDBCon();
        getNewData();
    }
void getNewData() {
        // get all user data and populate fields 
        try{
            //populate type combo box
            cmbUserType.removeAllItems();
            rs = dbCon.executeStatement("SELECT TYPE, DESCRIPTION FROM USERTYPE");
            rs.beforeFirst();
            while (rs.next())
                cmbUserType.addItem(rs.getString("DESCRIPTION"));
            // display description of type for user's ease
        }
        catch (SQLException e)
        {
            javax.swing.JLabel label = new javax.swing.JLabel("SQL Error - Display selected loginuser.");
            label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
            JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }
//    DECRYPTION PROCESS //(not used since passwords may not be decrypted to check for match)
//    public String passDecryption(String password)
//    {
//        char[] pass = password.toCharArray();
//        char[] decrypt = new char[pass.length];
//        
//        String skey = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
//        char[] key = skey.toCharArray();
//        
//        for (int i = 0; i < pass.length; i++)
//        {
//            int index = skey.indexOf(pass[i]);
//            if (index - 37 < 0)
//                decrypt[i] = key[index - 37 + key.length];
//            else
//                decrypt[i] = key[index - 37];
//        }
//        String decrypted = String.valueOf(decrypt);
//        return decrypted;
//    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        txtName = new javax.swing.JTextField();
        cmbUserType = new javax.swing.JComboBox<>();
        btnAddNewEmp = new javax.swing.JButton();
        lblUsernameError = new javax.swing.JLabel();
        lblConfirmPasswordError = new javax.swing.JLabel();
        lblPasswordError = new javax.swing.JLabel();
        lblNameError = new javax.swing.JLabel();
        txtPassword = new javax.swing.JPasswordField();
        txtConfirmPassword = new javax.swing.JPasswordField();
        showpass = new javax.swing.JCheckBox();
        showconfirmpass = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Add New Login User");
        setPreferredSize(new java.awt.Dimension(1000, 536));
        setResizable(false);
        getContentPane().setLayout(null);

        jLabel1.setFont(new java.awt.Font("Baskerville Old Face", 1, 36)); // NOI18N
        jLabel1.setText("Add New Login User");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(330, 70, 368, 36);

        jLabel2.setFont(new java.awt.Font("Baskerville Old Face", 1, 18)); // NOI18N
        jLabel2.setText("Username:");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(290, 200, 99, 19);

        jLabel3.setFont(new java.awt.Font("Baskerville Old Face", 1, 18)); // NOI18N
        jLabel3.setText("Password:");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(290, 240, 100, 19);

        jLabel4.setFont(new java.awt.Font("Baskerville Old Face", 1, 18)); // NOI18N
        jLabel4.setText("Confirm Password:");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(220, 300, 180, 19);

        jLabel5.setFont(new java.awt.Font("Baskerville Old Face", 1, 18)); // NOI18N
        jLabel5.setText("Type:");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(340, 380, 60, 19);

        jLabel8.setFont(new java.awt.Font("Baskerville Old Face", 1, 18)); // NOI18N
        jLabel8.setText("Name:");
        getContentPane().add(jLabel8);
        jLabel8.setBounds(330, 160, 60, 19);

        txtUsername.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        getContentPane().add(txtUsername);
        txtUsername.setBounds(400, 200, 200, 28);

        txtName.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        getContentPane().add(txtName);
        txtName.setBounds(400, 160, 200, 28);

        cmbUserType.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        getContentPane().add(cmbUserType);
        cmbUserType.setBounds(400, 380, 200, 28);

        btnAddNewEmp.setFont(new java.awt.Font("Baskerville Old Face", 1, 24)); // NOI18N
        btnAddNewEmp.setText("Add New");
        btnAddNewEmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewEmpActionPerformed(evt);
            }
        });
        getContentPane().add(btnAddNewEmp);
        btnAddNewEmp.setBounds(410, 450, 150, 31);

        lblUsernameError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblUsernameError.setForeground(new java.awt.Color(255, 0, 0));
        lblUsernameError.setText("error label");
        getContentPane().add(lblUsernameError);
        lblUsernameError.setBounds(610, 200, 237, 22);

        lblConfirmPasswordError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblConfirmPasswordError.setForeground(new java.awt.Color(255, 0, 0));
        lblConfirmPasswordError.setText("error label");
        getContentPane().add(lblConfirmPasswordError);
        lblConfirmPasswordError.setBounds(610, 300, 237, 22);

        lblPasswordError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblPasswordError.setForeground(new java.awt.Color(255, 0, 0));
        lblPasswordError.setText("error label");
        getContentPane().add(lblPasswordError);
        lblPasswordError.setBounds(610, 240, 237, 22);

        lblNameError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblNameError.setForeground(new java.awt.Color(255, 0, 0));
        lblNameError.setText("error label");
        getContentPane().add(lblNameError);
        lblNameError.setBounds(610, 160, 237, 22);

        txtPassword.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        txtPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPasswordActionPerformed(evt);
            }
        });
        getContentPane().add(txtPassword);
        txtPassword.setBounds(400, 240, 200, 28);

        txtConfirmPassword.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        getContentPane().add(txtConfirmPassword);
        txtConfirmPassword.setBounds(400, 300, 200, 28);

        showpass.setText("Show Password");
        showpass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showpassActionPerformed(evt);
            }
        });
        getContentPane().add(showpass);
        showpass.setBounds(400, 270, 120, 20);

        showconfirmpass.setText("Show Password");
        showconfirmpass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showconfirmpassActionPerformed(evt);
            }
        });
        getContentPane().add(showconfirmpass);
        showconfirmpass.setBounds(400, 340, 123, 20);

        jLabel6.setIcon(new javax.swing.ImageIcon("C:\\Users\\vibha\\Downloads\\newlib.jpg")); // NOI18N
        jLabel6.setText("jLabel6");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(0, 0, 1000, 540);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    void clearErrorLabels() {
        // erase error label text and set visibility to false 
        lblConfirmPasswordError.setText("");
        lblConfirmPasswordError.setVisible(false);
        lblNameError.setText("");
        lblNameError.setVisible(false);
        lblPasswordError.setText("");
        lblPasswordError.setVisible(false);
        lblUsernameError.setText("");
        lblUsernameError.setVisible(false);
    }

   
    
    boolean isValidPassword() {
        // check validity of the password value entered by the user based on your design 
        boolean result = false; 
        
        if (!(txtPassword.getText().trim().isEmpty()) && !(txtConfirmPassword.getText().trim().isEmpty()))
        {
            String pass = txtPassword.getText().trim();
            String confirmpass = txtConfirmPassword.getText().trim();

            if (!pass.equals(confirmpass))
            {
                lblConfirmPasswordError.setText("Invalid. Passwords do not Match.");
                lblConfirmPasswordError.setVisible(true);
            }
            else
                result = true;
        }
        return result;
    }

    boolean isValidData() {
        // check validity of all values entered 
        boolean result = true;
        clearErrorLabels();
        
        if (txtUsername.getText().trim().isEmpty() || txtUsername.getText().trim().length() > 25) {
            if (txtUsername.getText().trim().isEmpty()) {
                lblUsernameError.setText("Invalid. Cannot be empty.");
            } else if (txtUsername.getText().trim().length() > 25) {
                lblUsernameError.setText("Invalid. Must be < 25 characters.");
            }
            lblUsernameError.setVisible(true);
            result = false;
        }
        
        //checking for password correctness using regex (multiple Alphanumeric characters)
        if (txtPassword.getText().trim().isEmpty() || txtPassword.getText().trim().length() > 25 || !(txtPassword.getText().trim().matches("[a-zA-Z0-9]+"))) {
            if (txtPassword.getText().trim().isEmpty()) {
                lblPasswordError.setText("Invalid. Cannot be empty.");
            } else if (txtPassword.getText().trim().length() > 25) {
                lblPasswordError.setText("Invalid. Must be < 25 characters.");
            } else if (txtPassword.getText().trim().matches("[a-zA-Z0-9]+")){
                lblPasswordError.setText("Invalid. Must contain only Alphanumeric Characters.");
            }
            lblPasswordError.setVisible(true);
            result = false;
        }
        
        if (txtName.getText().trim().isEmpty() || txtName.getText().trim().length() > 25) {
            if (txtName.getText().trim().isEmpty()) {
                lblNameError.setText("Invalid. Cannot be empty.");
            } else if (txtName.getText().trim().length() > 25) {
                lblNameError.setText("Invalid. Must be < 25 characters.");
            }
            lblNameError.setVisible(true);
            result = false;
        }
        
        if (result == true)
            result = isValidPassword();
        else
            isValidPassword();
        
        return result;
    }

    void clearInputBoxes() {
        // clear all text boxes and set the user type combo to the default value
        txtUsername.setText("");
        txtName.setText("");
        txtPassword.setText("");
        txtConfirmPassword.setText("");
        cmbUserType.setSelectedIndex(0);
    }
    
    private boolean isDuplicate(String username) throws SQLException {
        boolean isduplicate = false;
        rs = dbCon.executeStatement("SELECT * FROM libraryuser WHERE username='" + username + "'");
        // isBeforeFirst() returns false if there are no data in the resultset
        isduplicate = rs.isBeforeFirst();

        return isduplicate;
    }
    
    private void btnAddNewEmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewEmpActionPerformed
        // TODO add your handling code here:
        boolean validation = isValidData();
         try {
            if (validation && !isDuplicate(txtUsername.getText().trim())){
                
                // retrieving the type from description
                rs = dbCon.executeStatement("SELECT type FROM usertype WHERE description = '" + cmbUserType.getSelectedItem() + "'");
                rs.first();
                String type = rs.getString("type");

                String prepSQL = "INSERT INTO libraryuser (username, password, name, usertype) VALUES ('"
                        + txtUsername.getText().trim() + "', "
                        + "'" + passEncryption(txtPassword.getText().trim()) + "', "
                        + "'" + txtName.getText().trim() + "', "
                        + type + ")";

                int result = dbCon.executePrepared(prepSQL);
                if (result > 0) {

                    javax.swing.JLabel label = new javax.swing.JLabel("New User added successfully.");
                    label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                    JOptionPane.showMessageDialog(null, label, "SUCCESS", JOptionPane.INFORMATION_MESSAGE);
                    clearInputBoxes();
                } else {

                }

                rs.close();
            } else {
                if (!validation){
                    javax.swing.JLabel label = new javax.swing.JLabel("Please fix validation errors...");
                    label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                    JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);
                } else{
                    javax.swing.JLabel label = new javax.swing.JLabel("Username Already exists. Use a different username.");
                    label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                    JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error adding new User.");
        }
        // verify input data        
        // verify that new user does not currently exist 
        // if all validations are successful then enter the new user
        
    }//GEN-LAST:event_btnAddNewEmpActionPerformed

    private void showconfirmpassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showconfirmpassActionPerformed
        // TODO add your handling code here:
        
        // setting the echo character to be displayed to mask the password entered
        if (showconfirmpass.isSelected())
            txtConfirmPassword.setEchoChar((char)0);
        else
            txtConfirmPassword.setEchoChar('*');
    }//GEN-LAST:event_showconfirmpassActionPerformed

    private void txtPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPasswordActionPerformed

    private void showpassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showpassActionPerformed
        // TODO add your handling code here:
        
        // setting the echo character to be displayed to mask the password entered
        if (showpass.isSelected())
            txtPassword.setEchoChar((char)0);
        else
            txtPassword.setEchoChar('*');
    }//GEN-LAST:event_showpassActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddNewEmp;
    private javax.swing.JComboBox<String> cmbUserType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel lblConfirmPasswordError;
    private javax.swing.JLabel lblNameError;
    private javax.swing.JLabel lblPasswordError;
    private javax.swing.JLabel lblUsernameError;
    private javax.swing.JCheckBox showconfirmpass;
    private javax.swing.JCheckBox showpass;
    private javax.swing.JPasswordField txtConfirmPassword;
    private javax.swing.JTextField txtName;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables
}
