package jdbcgui;

import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author wissam
 */
public class AddBooks extends javax.swing.JFrame {

    /**
     * Creates new form AddBooks
     */
    myDBCon dbCon;
    ResultSet rs;

    public AddBooks() {
        initComponents();
        this.setLocationRelativeTo(null); // center form in screen 
        // set all error labels to invisible
        lblErrorAuthorName.setVisible(false);
        lblErrorBookId.setVisible(false);
        lblErrorLanguage.setVisible(false);
        lblErrorNumCpy.setVisible(false);
        lblErrorPublishedDate.setVisible(false);
        lblErrorTitle.setVisible(false);
        //dbCon = new dbCon();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtBookId = new javax.swing.JTextField();
        txtBookTitle = new javax.swing.JTextField();
        txtNumCpy = new javax.swing.JTextField();
        btnAddNewBook = new javax.swing.JButton();
        lblErrorBookId = new javax.swing.JLabel();
        lblErrorNumCpy = new javax.swing.JLabel();
        lblErrorTitle = new javax.swing.JLabel();
        cmbGenre = new javax.swing.JComboBox<>();
        txtLanguage = new javax.swing.JFormattedTextField();
        jLabel10 = new javax.swing.JLabel();
        txtPublishedDate = new javax.swing.JFormattedTextField();
        jLabel11 = new javax.swing.JLabel();
        lblErrorLanguage = new javax.swing.JLabel();
        lblErrorPublishedDate = new javax.swing.JLabel();
        lblErrorAuthorName = new javax.swing.JLabel();
        btnAddNewAuthor = new javax.swing.JButton();
        cmbAuthorName = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Add New Employee");
        setPreferredSize(new java.awt.Dimension(1000, 536));
        setResizable(false);
        getContentPane().setLayout(null);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setText("Add New Book");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(390, 20, 265, 44);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Book ID:");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(330, 110, 90, 20);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setText("Title:");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(360, 150, 60, 22);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setText("Genre:");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(350, 190, 62, 24);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setText("Number of Copies:");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(240, 220, 180, 22);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel6.setText("Language:");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(320, 260, 100, 22);

        txtBookId.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtBookId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBookIdActionPerformed(evt);
            }
        });
        getContentPane().add(txtBookId);
        txtBookId.setBounds(420, 110, 200, 28);

        txtBookTitle.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtBookTitle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBookTitleActionPerformed(evt);
            }
        });
        getContentPane().add(txtBookTitle);
        txtBookTitle.setBounds(420, 150, 200, 28);

        txtNumCpy.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtNumCpy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNumCpyActionPerformed(evt);
            }
        });
        getContentPane().add(txtNumCpy);
        txtNumCpy.setBounds(420, 220, 200, 28);

        btnAddNewBook.setFont(new java.awt.Font("Forte", 0, 24)); // NOI18N
        btnAddNewBook.setText("Add New");
        btnAddNewBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewBookActionPerformed(evt);
            }
        });
        getContentPane().add(btnAddNewBook);
        btnAddNewBook.setBounds(450, 430, 127, 41);

        lblErrorBookId.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblErrorBookId.setForeground(new java.awt.Color(255, 0, 0));
        lblErrorBookId.setText("error label");
        getContentPane().add(lblErrorBookId);
        lblErrorBookId.setBounds(630, 110, 250, 22);

        lblErrorNumCpy.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblErrorNumCpy.setForeground(new java.awt.Color(255, 0, 0));
        lblErrorNumCpy.setText("error label");
        getContentPane().add(lblErrorNumCpy);
        lblErrorNumCpy.setBounds(630, 220, 150, 22);

        lblErrorTitle.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblErrorTitle.setForeground(new java.awt.Color(255, 0, 0));
        lblErrorTitle.setText("error label");
        getContentPane().add(lblErrorTitle);
        lblErrorTitle.setBounds(630, 150, 150, 22);

        cmbGenre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Mystery", "Thriller", "Fiction", "Non-Fiction", "Romance" }));
        cmbGenre.setSelectedIndex(-1);
        cmbGenre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbGenreActionPerformed(evt);
            }
        });
        getContentPane().add(cmbGenre);
        cmbGenre.setBounds(420, 190, 200, 22);

        txtLanguage.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd-MMM-yyyy"))));
        txtLanguage.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        getContentPane().add(txtLanguage);
        txtLanguage.setBounds(420, 260, 200, 28);

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel10.setText("Author Name:");
        getContentPane().add(jLabel10);
        jLabel10.setBounds(280, 350, 140, 22);

        txtPublishedDate.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd-MMM-yyyy"))));
        txtPublishedDate.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        getContentPane().add(txtPublishedDate);
        txtPublishedDate.setBounds(420, 300, 200, 28);

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel11.setText("Published Date:");
        getContentPane().add(jLabel11);
        jLabel11.setBounds(270, 300, 150, 22);

        lblErrorLanguage.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblErrorLanguage.setForeground(new java.awt.Color(255, 0, 0));
        lblErrorLanguage.setText("error label");
        getContentPane().add(lblErrorLanguage);
        lblErrorLanguage.setBounds(630, 260, 150, 22);

        lblErrorPublishedDate.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblErrorPublishedDate.setForeground(new java.awt.Color(255, 0, 0));
        lblErrorPublishedDate.setText("error label");
        getContentPane().add(lblErrorPublishedDate);
        lblErrorPublishedDate.setBounds(630, 300, 150, 22);

        lblErrorAuthorName.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblErrorAuthorName.setForeground(new java.awt.Color(255, 0, 0));
        lblErrorAuthorName.setText("error label");
        getContentPane().add(lblErrorAuthorName);
        lblErrorAuthorName.setBounds(630, 350, 150, 22);

        btnAddNewAuthor.setText("Add Author");
        btnAddNewAuthor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewAuthorActionPerformed(evt);
            }
        });
        getContentPane().add(btnAddNewAuthor);
        btnAddNewAuthor.setBounds(520, 380, 100, 23);

        cmbAuthorName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbAuthorNameActionPerformed(evt);
            }
        });
        getContentPane().add(cmbAuthorName);
        cmbAuthorName.setBounds(420, 350, 200, 22);

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jdbcgui/book.jpg"))); // NOI18N
        getContentPane().add(jLabel7);
        jLabel7.setBounds(-60, -10, 1210, 610);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtNumCpyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNumCpyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNumCpyActionPerformed

    // verify valid entry of integer values
    public boolean isInteger(String s) {
        try {
            Integer.parseInt(s);
            return true;
        } catch (NumberFormatException ex) {
            return false;
        }
    }
    
    public boolean isIntPositive(String s) {
        try {
            int n = Integer.parseInt(s);
            return n > 0;
        } catch (NumberFormatException ex) {
            return false;
        }
    }

    // verify valid entry of double values
    public boolean isDouble(String s) {
        try {
            Double.parseDouble(s);
            return true;
        } catch (NumberFormatException ex) {
            return false;
        }
    }

    void clearErrorLabels() { // clear all labels used to display error messages 
        lblErrorBookId.setText("");
        lblErrorBookId.setVisible(false);
        lblErrorTitle.setText("");
        lblErrorTitle.setVisible(false);
        lblErrorNumCpy.setText("");
        lblErrorNumCpy.setVisible(false);
        lblErrorAuthorName.setVisible(false);
        lblErrorAuthorName.setText("");
        lblErrorLanguage.setVisible(false);
        lblErrorLanguage.setText("");
        lblErrorPublishedDate.setVisible(false);
        lblErrorPublishedDate.setText("");
        
        try {// populate the authors combo box
            dbCon = new myDBCon();
            
            rs = dbCon.executeStatement("SELECT AUTHOR_ID, AUTHOR_NAME FROM AUTHOR ORDER BY AUTHOR_ID ASC;");
            rs.beforeFirst();
            cmbAuthorName.removeAllItems();
            // populate user type combo box
            while (rs.next()) {
                cmbAuthorName.addItem(rs.getString("AUTHOR_NAME"));
            }
            cmbAuthorName.setSelectedIndex(-1);     //maybe this is not needed
        } catch (SQLException e) {
            System.out.println(e);
        }
    }

    // validate all user entry before sending new employee details to DB
    boolean isValidData() {
        clearErrorLabels();
        boolean result = true; // assume all details are true, set to false if otherwise 
        // you need to check format deails and make sure they are consistent with DB 
        if (txtBookId.getText().trim().isEmpty() || (txtBookId.getText().trim().length() != 4) || !isIntPositive(txtBookId.getText().trim())) 
        {
            if (txtBookId.getText().trim().isEmpty()) {
                lblErrorBookId.setText("Invalid. Cannot be empty.");
            } else if (txtBookId.getText().trim().length() != 4) {
                lblErrorBookId.setText("Invalid. Must be 4 digits long.");
            } else if (!isIntPositive(txtBookId.getText()))
                lblErrorBookId.setText("Invalid. Must be 4 digit positive integers.");
            lblErrorBookId.setVisible(true);
            result = false;
        }

        if (txtBookTitle.getText().trim().isEmpty() || (txtBookTitle.getText().trim().length() > 25)) {
            if (txtBookTitle.getText().trim().isEmpty()) {
                lblErrorTitle.setText("Invalid. Cannot be empty.");
            } else if ((txtBookTitle.getText().trim().length() > 25)) {
                lblErrorTitle.setText("Invalid. Must be at most 25 characters long.");
            }
            lblErrorTitle.setVisible(true);
            result = false;
        }

        if (txtNumCpy.getText().trim().isEmpty() || !isIntPositive(txtNumCpy.getText().trim())) { //check for string
            if (txtNumCpy.getText().trim().isEmpty()) {
                lblErrorNumCpy.setText("Invalid. Cannot be empty.");
            } else if (!isIntPositive(txtNumCpy.getText().trim())) { 
                lblErrorNumCpy.setText("Invalid. Must be a positive integer value");
            }
            lblErrorNumCpy.setVisible(true);
            result = false;
        }

        if (txtLanguage.getText().trim().isEmpty() || txtLanguage.getText().trim().length() > 20){
            if (txtLanguage.getText().trim().isEmpty()) {
                lblErrorLanguage.setText("Invalid. Cannot be empty.");
            } else if (txtLanguage.getText().trim().length() > 20) {
                lblErrorLanguage.setText("Invalid. Must be at most 20 characters long.");
            }
            lblErrorLanguage.setVisible(true);
            result = false;
        }
        
        if (txtPublishedDate.getText().trim().isEmpty()) {
            lblErrorPublishedDate.setText("Invalid. Cannot be empty.");
            lblErrorPublishedDate.setVisible(true);
            result = false;
        }
        
        return result;
    }

    void clearInputBoxes() { // clear for every new entry 
        txtBookId.setText("");
        txtBookTitle.setText("");
        cmbGenre.setSelectedIndex(-1);
        txtNumCpy.setText("");
        txtLanguage.setText("");
        txtPublishedDate.setText("");
        cmbAuthorName.setSelectedIndex(-1);
    }

    private boolean isDuplicate(int bookId) throws SQLException {
        boolean isduplicate = false;
        String stmtSQL = "SELECT BOOK_ID FROM BOOK WHERE BOOK_ID = " + bookId;
        rs = dbCon.executeStatement(stmtSQL);
        // isBeforeFirst() returns false if there are no data in the resultset
        isduplicate = rs.isBeforeFirst();
        return isduplicate;
    }
    
    private void btnAddNewBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewBookActionPerformed
        // TODO add your handling code here:

        try {
            if (isValidData() && !isDuplicate(Integer.parseInt(txtBookId.getText().trim()))) {
                boolean AuthorExists = false;
                int authorresult = 0;
                // if new employee details are valid, then add new employee to DB
                rs = dbCon.executeStatement("SELECT AUTHOR_ID, AUTHOR_NAME FROM AUTHOR WHERE AUTHOR_NAME = " + cmbAuthorName.getSelectedItem());
                rs.first();
                String AuthorId = rs.getString("AUTHOR_ID");
                
                String prepSQL = "INSERT INTO BOOK (BOOK_ID, BOOK_TITLE, GENRE, NO_OF_COPIES, LANGUAGE) VALUES ("
                        + txtBookId.getText().trim() + ", "
                        + "'" + txtBookTitle.getText().trim().toUpperCase() + "', "
                        + "'" + cmbGenre.getSelectedItem().toString().toUpperCase() + "', "
                        + txtNumCpy.getText().trim().toUpperCase() + ", "
                        + "'" + txtLanguage.getText().trim().toUpperCase() + "')";
                int bookresult = dbCon.executePrepared(prepSQL);
                
                prepSQL = "INSERT INTO WRITTEN_BY (BOOK_ID, AUTHOR_ID, PUBLISHED_DATE) VALUES ('"
                        + txtBookId.getText().trim() + ", "
                        + "'" + AuthorId + ", "
                        + "to_date('" + txtPublishedDate.getText().trim() + "', 'yyyy-mm-dd'))";
                int written_byresult = dbCon.executePrepared(prepSQL);
                
                int book_copiesresult = 0;
                for (int i = 1; i <= Integer.parseInt(txtNumCpy.getText().trim()); i++)
                {
                    prepSQL = "INSERT INTO BOOK_COPIES (COPY_ID, BOOK_ID) VALUES (" + String.valueOf(i) + ", " + txtBookId.getText().trim() +")";
                    book_copiesresult += dbCon.executePrepared(prepSQL);
                }  
                
                if (bookresult > 0) {
                    javax.swing.JLabel label;
                    if (authorresult > 0){
                        label = new javax.swing.JLabel("New book and author added successfully.");
                    }
                    else {
                        label = new javax.swing.JLabel("New book added successfully.");
                    }
                    label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                    JOptionPane.showMessageDialog(null, label, "SUCCESS", JOptionPane.INFORMATION_MESSAGE);
                    clearInputBoxes();
                } else {}
                
                rs.close();
            } else {
                if (!isDuplicate(Integer.parseInt(txtBookId.getText().trim()))) {
                    javax.swing.JLabel label = new javax.swing.JLabel("Please fix validation errors...");
                    label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                    JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);
                } else {
                    javax.swing.JLabel label = new javax.swing.JLabel("BookId Already exists. Use a different Book ID number!");
                    label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                    JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.INFORMATION_MESSAGE);
                    // check validation errors 
                }

            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error adding new book.");
        }
    }//GEN-LAST:event_btnAddNewBookActionPerformed

    private void cmbGenreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbGenreActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_cmbGenreActionPerformed

    private void txtBookIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBookIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBookIdActionPerformed

    private void txtBookTitleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBookTitleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBookTitleActionPerformed

    private void cmbAuthorNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbAuthorNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbAuthorNameActionPerformed

    private void btnAddNewAuthorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewAuthorActionPerformed
        // TODO add your handling code here:
        (new AddNewAuthor()).setVisible(true);
        try {// populate the authors combo box
            dbCon = new myDBCon();
            
            rs = dbCon.executeStatement("SELECT AUTHOR_ID, AUTHOR_NAME FROM AUTHOR ORDER BY AUTHOR_ID ASC;");
            rs.beforeFirst();
            cmbAuthorName.removeAllItems();
            // populate user type combo box
            while (rs.next()) {
                cmbAuthorName.addItem(rs.getString("AUTHOR_NAME"));
            }
            cmbAuthorName.setSelectedIndex(-1); //maybe this is not needed
        } catch (SQLException e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_btnAddNewAuthorActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddNewAuthor;
    private javax.swing.JButton btnAddNewBook;
    private javax.swing.JComboBox<String> cmbAuthorName;
    private javax.swing.JComboBox<String> cmbGenre;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel lblErrorAuthorName;
    private javax.swing.JLabel lblErrorBookId;
    private javax.swing.JLabel lblErrorLanguage;
    private javax.swing.JLabel lblErrorNumCpy;
    private javax.swing.JLabel lblErrorPublishedDate;
    private javax.swing.JLabel lblErrorTitle;
    private javax.swing.JTextField txtBookId;
    private javax.swing.JTextField txtBookTitle;
    private javax.swing.JFormattedTextField txtLanguage;
    private javax.swing.JTextField txtNumCpy;
    private javax.swing.JFormattedTextField txtPublishedDate;
    // End of variables declaration//GEN-END:variables
}
