package LibraryDatabase;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author wissam
 */
public class UpdateDeleteLoginLibUser extends javax.swing.JFrame {

    /**
     * Creates new form AddEmployee
     */
    myDBCon dbCon;
    ResultSet rs;
    
    // encryption is performed using the customized encryption function below
    public String passEncryption(String password)
    {   
        char[] pass = password.toCharArray();
        char[] encrypt = new char[pass.length];
        
        String skey = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        char[] key = skey.toCharArray();
        
        for (int i = 0; i < pass.length; i++)
        {
            int index = skey.indexOf(pass[i]);
            index = (index + 37) % key.length;
            encrypt[i] = key[index];
        }
        String encrypted = String.valueOf(encrypt);
        
        return encrypted;
    }
        
    public UpdateDeleteLoginLibUser() {
        initComponents();
        txtPassword.setEchoChar('*');
        txtConfirmPassword.setEchoChar('*');
        // center form in screen
        this.setLocationRelativeTo(null);
      
        // set all error labels to invisible
        lblNameError.setVisible(false);
        lblPasswordError.setVisible(false);
        lblUsernameError.setVisible(false);
        lblConfirmPasswordError.setVisible(false);
               
        // connect to db and get user data and populate form fields
        dbCon = new myDBCon();
        getNewData();       
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        txtName = new javax.swing.JTextField();
        cmbUserType = new javax.swing.JComboBox<>();
        btnUpdateUser = new javax.swing.JButton();
        lblUsernameError = new javax.swing.JLabel();
        lblConfirmPasswordError = new javax.swing.JLabel();
        lblPasswordError = new javax.swing.JLabel();
        lblNameError = new javax.swing.JLabel();
        txtPassword = new javax.swing.JPasswordField();
        txtConfirmPassword = new javax.swing.JPasswordField();
        btnDeleteUser = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        btnPrevious = new javax.swing.JButton();
        showpass = new javax.swing.JCheckBox();
        showconfirmpass = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Update/Delete Login User");
        setMaximumSize(new java.awt.Dimension(1000, 536));
        setMinimumSize(new java.awt.Dimension(1000, 536));
        setResizable(false);
        getContentPane().setLayout(null);

        jLabel1.setFont(new java.awt.Font("Baskerville Old Face", 1, 36)); // NOI18N
        jLabel1.setText("Update/Delete Login User");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(310, 60, 473, 36);

        jLabel2.setFont(new java.awt.Font("Baskerville Old Face", 1, 18)); // NOI18N
        jLabel2.setText("Username:");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(310, 200, 100, 22);

        jLabel3.setFont(new java.awt.Font("Baskerville Old Face", 1, 18)); // NOI18N
        jLabel3.setText("Password:");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(320, 240, 90, 19);

        jLabel4.setFont(new java.awt.Font("Baskerville Old Face", 1, 18)); // NOI18N
        jLabel4.setText("Confirm Password:");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(250, 300, 150, 19);

        jLabel5.setFont(new java.awt.Font("Baskerville Old Face", 1, 18)); // NOI18N
        jLabel5.setText("Type:");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(350, 380, 70, 19);

        jLabel8.setFont(new java.awt.Font("Baskerville Old Face", 1, 18)); // NOI18N
        jLabel8.setText("Name:");
        getContentPane().add(jLabel8);
        jLabel8.setBounds(340, 160, 60, 19);

        txtUsername.setEditable(false);
        txtUsername.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        getContentPane().add(txtUsername);
        txtUsername.setBounds(410, 190, 200, 28);

        txtName.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        getContentPane().add(txtName);
        txtName.setBounds(410, 150, 200, 28);

        cmbUserType.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        getContentPane().add(cmbUserType);
        cmbUserType.setBounds(410, 380, 200, 28);

        btnUpdateUser.setFont(new java.awt.Font("Baskerville Old Face", 1, 24)); // NOI18N
        btnUpdateUser.setText("Update");
        btnUpdateUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateUserActionPerformed(evt);
            }
        });
        getContentPane().add(btnUpdateUser);
        btnUpdateUser.setBounds(410, 450, 110, 31);

        lblUsernameError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblUsernameError.setForeground(new java.awt.Color(255, 0, 0));
        lblUsernameError.setText("error label");
        getContentPane().add(lblUsernameError);
        lblUsernameError.setBounds(620, 190, 186, 22);

        lblConfirmPasswordError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblConfirmPasswordError.setForeground(new java.awt.Color(255, 0, 0));
        lblConfirmPasswordError.setText("error label");
        getContentPane().add(lblConfirmPasswordError);
        lblConfirmPasswordError.setBounds(620, 300, 186, 22);

        lblPasswordError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblPasswordError.setForeground(new java.awt.Color(255, 0, 0));
        lblPasswordError.setText("error label");
        getContentPane().add(lblPasswordError);
        lblPasswordError.setBounds(620, 230, 186, 22);

        lblNameError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblNameError.setForeground(new java.awt.Color(255, 0, 0));
        lblNameError.setText("error label");
        getContentPane().add(lblNameError);
        lblNameError.setBounds(620, 150, 186, 22);

        txtPassword.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        txtPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPasswordActionPerformed(evt);
            }
        });
        getContentPane().add(txtPassword);
        txtPassword.setBounds(410, 230, 200, 28);

        txtConfirmPassword.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        getContentPane().add(txtConfirmPassword);
        txtConfirmPassword.setBounds(410, 300, 200, 28);

        btnDeleteUser.setFont(new java.awt.Font("Baskerville Old Face", 1, 24)); // NOI18N
        btnDeleteUser.setText("Delete");
        btnDeleteUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteUserActionPerformed(evt);
            }
        });
        getContentPane().add(btnDeleteUser);
        btnDeleteUser.setBounds(530, 450, 110, 31);

        btnNext.setFont(new java.awt.Font("Baskerville Old Face", 1, 24)); // NOI18N
        btnNext.setText("Next >>");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });
        getContentPane().add(btnNext);
        btnNext.setBounds(650, 450, 130, 31);

        btnPrevious.setFont(new java.awt.Font("Baskerville Old Face", 1, 24)); // NOI18N
        btnPrevious.setText("<< Previous");
        btnPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreviousActionPerformed(evt);
            }
        });
        getContentPane().add(btnPrevious);
        btnPrevious.setBounds(240, 450, 160, 31);

        showpass.setText("Show Password");
        showpass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showpassActionPerformed(evt);
            }
        });
        getContentPane().add(showpass);
        showpass.setBounds(410, 270, 145, 20);

        showconfirmpass.setText("Show Password");
        showconfirmpass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showconfirmpassActionPerformed(evt);
            }
        });
        getContentPane().add(showconfirmpass);
        showconfirmpass.setBounds(410, 340, 129, 20);

        jLabel6.setIcon(new javax.swing.ImageIcon("C:\\Users\\vibha\\Downloads\\newlib.jpg")); // NOI18N
        jLabel6.setText("jLabel6");
        jLabel6.setMaximumSize(new java.awt.Dimension(1000, 536));
        jLabel6.setMinimumSize(new java.awt.Dimension(1000, 536));
        jLabel6.setPreferredSize(new java.awt.Dimension(1000, 536));
        getContentPane().add(jLabel6);
        jLabel6.setBounds(0, 0, 1000, 536);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    void getNewData() {
        // get all user data and populate fields 
        try{
            //populate type combo box
            cmbUserType.removeAllItems();
            rs = dbCon.executeStatement("SELECT TYPE, DESCRIPTION FROM USERTYPE");
            rs.beforeFirst();
            while (rs.next())
                cmbUserType.addItem(rs.getString("DESCRIPTION"));
            
            rs = dbCon.executeStatement("SELECT username, password, name, usertype FROM libraryuser");
            rs.first();
            populateFields();
        }
        catch (SQLException e)
        {
            javax.swing.JLabel label = new javax.swing.JLabel("SQL Error - Display selected loginuser.");
            label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
            JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void populateFields() {
        // populate fields with the current user details 
        try {
            txtName.setText(rs.getString("name"));
            txtUsername.setText(rs.getString("username"));
            String type = rs.getString("type");
            
            // displaying description name instead of type for user's ease
            ResultSet rs1 = dbCon.executeStatement("SELECT description FROM usertype WHERE type ='" + Integer.valueOf(type)+"'");
            rs1.first();
            cmbUserType.setSelectedItem(rs1.getString("description"));
            txtPassword.setText("");
            txtConfirmPassword.setText("");
            rs1.close();
            
            EnableDisableButtons();
        } catch (SQLException ex) {
            Logger.getLogger(UpdateDeleteLoginLibUser.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    

    private void EnableDisableButtons() {
        // enable/disable Previous/Next buttons
        try {
            if (rs.isFirst()) {
                btnPrevious.setEnabled(false);
            } else {
                btnPrevious.setEnabled(true);
            }
            if (rs.isLast()) {
                btnNext.setEnabled(false);
            } else {
                btnNext.setEnabled(true);
            }
        } catch (SQLException ex) {
            Logger.getLogger(UpdateDeleteLoginLibUser.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    void clearErrorLabels() {
        // clear all error labels and set their visibility to false 
        lblNameError.setText("");
        lblNameError.setVisible(false);
        lblUsernameError.setText("");
        lblUsernameError.setVisible(false);
        lblPasswordError.setText("");
        lblPasswordError.setVisible(false);
        lblConfirmPasswordError.setText("");
        lblConfirmPasswordError.setVisible(false);
    }

    boolean isValidPassword() {
        // check validity of new password in case of update 
        boolean result = false;
        if (!(txtPassword.getText().trim().isEmpty()) && !(txtConfirmPassword.getText().trim().isEmpty()))
        {
            String pass = txtPassword.getText().trim();
            String confirmpass = txtConfirmPassword.getText().trim();

            if (!pass.equals(confirmpass))
            {
                lblConfirmPasswordError.setText("Invalid. Passwords do not Match.");
                lblConfirmPasswordError.setVisible(true);
            }
            else
                result = true;
        }
        return result;
    }

    boolean isValidData() {
        // check validity of new data before update 
       boolean result = true;
        clearErrorLabels();
        
        if (txtUsername.getText().trim().isEmpty() || txtUsername.getText().trim().length() > 25) {
            if (txtUsername.getText().trim().isEmpty()) {
                lblUsernameError.setText("Invalid. Cannot be empty.");
            } else if (txtUsername.getText().trim().length() > 25) {
                lblUsernameError.setText("Invalid. Must be < 25 characters.");
            }
            lblUsernameError.setVisible(true);
            result = false;
        }
        
        //using regex to check for the correctness of password entered
        if (txtPassword.getText().trim().isEmpty() || txtPassword.getText().trim().length() > 25 || !(txtPassword.getText().trim().matches("[a-zA-Z0-9]+"))) {
            if (txtPassword.getText().trim().isEmpty()) {
                lblPasswordError.setText("Invalid. Cannot be empty.");
            } else if (txtPassword.getText().trim().length() > 25) {
                lblPasswordError.setText("Invalid. Must be < 25 characters.");
            } else if (txtPassword.getText().trim().matches("[a-zA-Z0-9]+")){
                lblPasswordError.setText("Invalid. Must contain only Alphanumeric Characters.");
            }
            lblPasswordError.setVisible(true);
            result = false;
        }
        
        if (txtName.getText().trim().isEmpty() || txtName.getText().trim().length() > 25) {
            if (txtName.getText().trim().isEmpty()) {
                lblNameError.setText("Invalid. Cannot be empty.");
            } else if (txtName.getText().trim().length() > 25) {
                lblNameError.setText("Invalid. Must be < 25 characters.");
            }
            lblNameError.setVisible(true);
            result = false;
        }
        
        if (result == true)
            result = isValidPassword();
        else
            isValidPassword();
        
        return result;
    }

    void clearInputBoxes() {
        txtName.setText("");
        txtUsername.setText("");
        txtPassword.setText("");
        txtConfirmPassword.setText("");
        cmbUserType.setSelectedIndex(0);
    }

    private void btnUpdateUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateUserActionPerformed
        // TODO add your handling code here:
        // verify input data
        // verify that new user does not currently exist 
        
        try {
            int a = JOptionPane.showConfirmDialog(null, "Confirm to Update the requested Login User");
            if (a == JOptionPane.YES_OPTION)
            {
                // retrieving the type using the description selected in combo box
                rs = dbCon.executeStatement("SELECT type FROM usertype WHERE description = '" + cmbUserType.getSelectedItem() + "'");
                rs.first();
                String type = rs.getString("type");
                if (isValidData()) {
                    String prepSQL = "UPDATE libraryuser SET name = " + 
                            "'" + txtName.getText().trim() + 
                            "', password = '" + passEncryption(txtPassword.getText().trim()) + 
                            "', usertype = " + type + 
                            " WHERE username = '" + txtUsername.getText().trim()+"'";

                    int result = dbCon.executePrepared(prepSQL);
                    if (result > 0) {
                        javax.swing.JLabel label = new javax.swing.JLabel("Login User - " + txtUsername.getText() + " updated successfully.");
                        label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                        JOptionPane.showMessageDialog(null, label, "UPDATE SUCCESSFUL", JOptionPane.INFORMATION_MESSAGE);

                        getNewData();

                    } else {
                        // check validation errors 
                    }
    //                prepStatement.close();
                } else {
                    javax.swing.JLabel label = new javax.swing.JLabel("Please fix validation errors...");
                    label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                    JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);

                }
            }
            else
            {
                javax.swing.JLabel label = new javax.swing.JLabel("Login User was not Updated.");
                label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                JOptionPane.showMessageDialog(null, label, "UPDATE UNSUCCESSFUL", JOptionPane.INFORMATION_MESSAGE);

            }

        } catch (SQLException e) {

            JOptionPane.showMessageDialog(null, "Error updating login users." + e.getMessage());

        }
    }//GEN-LAST:event_btnUpdateUserActionPerformed

    private void txtPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPasswordActionPerformed

    private void btnDeleteUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteUserActionPerformed
        // TODO add your handling code here:
        try {
            // make the result set scrolable forward/backward updatable
            
            int a = JOptionPane.showConfirmDialog(null, "Confirm to Delete the requested Login User");
            if (a == JOptionPane.YES_OPTION)
            {
                String prepSQL = "DELETE libraryuser WHERE username = '" + txtUsername.getText().trim()+"'";
                int result = dbCon.executePrepared(prepSQL);
                if (result > 0) {
                    javax.swing.JLabel label = new javax.swing.JLabel("Login User -  " + txtUsername.getText().trim() + " deleted successfully.");
                    label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                    JOptionPane.showMessageDialog(null, label, "DELETION SUCCESSFUL", JOptionPane.INFORMATION_MESSAGE);
                    getNewData();
                }
            }
            else
            {
                javax.swing.JLabel label = new javax.swing.JLabel("Login User was not Deleted.");
                label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                JOptionPane.showMessageDialog(null, label, "DELETION UNSUCCESSFUL", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error deleting login user.");
        }
    }//GEN-LAST:event_btnDeleteUserActionPerformed

    private void MoveNext() {
        // move result set to next record
        try {
            // TODO add your handling code here:
            if (!rs.isLast()) {
                rs.next();
                populateFields();
            }
        } catch (SQLException ex) {
            Logger.getLogger(UpdateDeleteLoginLibUser.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void MovePrevious() {
        // move result set to next record
        try {
            // TODO add your handling code here:
            if (!rs.isFirst()) {
                rs.previous();
                populateFields();
            }
        } catch (SQLException ex) {
            Logger.getLogger(UpdateDeleteLoginLibUser.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        // TODO add your handling code here:
        MoveNext();
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreviousActionPerformed
        // TODO add your handling code here:
        MovePrevious();
    }//GEN-LAST:event_btnPreviousActionPerformed

    private void showpassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showpassActionPerformed
        // TODO add your handling code here:
        
        // setting the echo character to be displayed to mask the password entered
        if (showpass.isSelected())
            txtPassword.setEchoChar((char)0);
        else
            txtPassword.setEchoChar('*');
    }//GEN-LAST:event_showpassActionPerformed

    private void showconfirmpassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showconfirmpassActionPerformed
        // TODO add your handling code here:
        
        // setting the echo character to be displayed to mask the password entered
        if (showconfirmpass.isSelected())
            txtConfirmPassword.setEchoChar((char)0);
        else
            txtConfirmPassword.setEchoChar('*');
    }//GEN-LAST:event_showconfirmpassActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeleteUser;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrevious;
    private javax.swing.JButton btnUpdateUser;
    private javax.swing.JComboBox<String> cmbUserType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel lblConfirmPasswordError;
    private javax.swing.JLabel lblNameError;
    private javax.swing.JLabel lblPasswordError;
    private javax.swing.JLabel lblUsernameError;
    private javax.swing.JCheckBox showconfirmpass;
    private javax.swing.JCheckBox showpass;
    private javax.swing.JPasswordField txtConfirmPassword;
    private javax.swing.JTextField txtName;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables
}
