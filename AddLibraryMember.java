package LibraryDatabase;

import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author wissam
 */
public class AddLibraryMember extends javax.swing.JFrame {

    /**
     * Creates new form AddLibraryMember
     */
    myDBCon dbCon;
    ResultSet rs;

    public AddLibraryMember() {
        initComponents();
        this.setLocationRelativeTo(null); // center form in screen 
        // set all error labels to invisible
        lblMemIDError.setVisible(false);
        lblFnameError.setVisible(false);
        lblLnameError.setVisible(false);
        lblPhoneError.setVisible(false);
        lblAddressError.setVisible(false);
        lblDateofMemError.setVisible(false);

        dbCon = new myDBCon();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtMemberID = new javax.swing.JTextField();
        txtFname = new javax.swing.JTextField();
        txtLname = new javax.swing.JTextField();
        txtAddress = new javax.swing.JTextField();
        btnAddNewLibMem = new javax.swing.JButton();
        lblMemIDError = new javax.swing.JLabel();
        lblLnameError = new javax.swing.JLabel();
        lblFnameError = new javax.swing.JLabel();
        lblPhoneError = new javax.swing.JLabel();
        lblAddressError = new javax.swing.JLabel();
        lblDateofMemError = new javax.swing.JLabel();
        txtDateofMem = new javax.swing.JFormattedTextField();
        txtPhone = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Add New Library Member");
        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(1000, 536));
        setResizable(false);
        getContentPane().setLayout(null);

        jLabel1.setFont(new java.awt.Font("Baskerville Old Face", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Add New Library Member");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(300, 50, 500, 40);

        jLabel2.setFont(new java.awt.Font("Baskerville Old Face", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Member ID:");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(290, 170, 100, 19);

        jLabel3.setFont(new java.awt.Font("Baskerville Old Face", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("First Name:");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(300, 210, 100, 19);

        jLabel4.setFont(new java.awt.Font("Baskerville Old Face", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Last Name:");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(300, 250, 88, 19);

        jLabel6.setFont(new java.awt.Font("Baskerville Old Face", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Phone:");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(330, 290, 65, 19);

        jLabel7.setFont(new java.awt.Font("Baskerville Old Face", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Address:");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(320, 330, 80, 19);

        jLabel8.setFont(new java.awt.Font("Baskerville Old Face", 1, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Date of Membership:");
        getContentPane().add(jLabel8);
        jLabel8.setBounds(230, 370, 189, 22);

        txtMemberID.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtMemberID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMemberIDActionPerformed(evt);
            }
        });
        getContentPane().add(txtMemberID);
        txtMemberID.setBounds(400, 160, 200, 28);

        txtFname.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        getContentPane().add(txtFname);
        txtFname.setBounds(400, 200, 200, 28);

        txtLname.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtLname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLnameActionPerformed(evt);
            }
        });
        getContentPane().add(txtLname);
        txtLname.setBounds(400, 240, 200, 28);

        txtAddress.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        getContentPane().add(txtAddress);
        txtAddress.setBounds(400, 320, 200, 28);

        btnAddNewLibMem.setFont(new java.awt.Font("Baskerville Old Face", 1, 24)); // NOI18N
        btnAddNewLibMem.setText("Add New");
        btnAddNewLibMem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewLibMemActionPerformed(evt);
            }
        });
        getContentPane().add(btnAddNewLibMem);
        btnAddNewLibMem.setBounds(430, 440, 130, 31);

        lblMemIDError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblMemIDError.setForeground(new java.awt.Color(255, 0, 0));
        lblMemIDError.setText("error label");
        getContentPane().add(lblMemIDError);
        lblMemIDError.setBounds(610, 160, 250, 22);

        lblLnameError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblLnameError.setForeground(new java.awt.Color(255, 0, 0));
        lblLnameError.setText("error label");
        getContentPane().add(lblLnameError);
        lblLnameError.setBounds(610, 240, 150, 22);

        lblFnameError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblFnameError.setForeground(new java.awt.Color(255, 0, 0));
        lblFnameError.setText("error label");
        getContentPane().add(lblFnameError);
        lblFnameError.setBounds(610, 200, 150, 22);

        lblPhoneError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblPhoneError.setForeground(new java.awt.Color(255, 0, 0));
        lblPhoneError.setText("error label");
        getContentPane().add(lblPhoneError);
        lblPhoneError.setBounds(610, 280, 150, 22);

        lblAddressError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblAddressError.setForeground(new java.awt.Color(255, 0, 0));
        lblAddressError.setText("error label");
        getContentPane().add(lblAddressError);
        lblAddressError.setBounds(610, 320, 190, 22);

        lblDateofMemError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblDateofMemError.setForeground(new java.awt.Color(255, 0, 0));
        lblDateofMemError.setText("error label");
        getContentPane().add(lblDateofMemError);
        lblDateofMemError.setBounds(610, 360, 220, 22);

        txtDateofMem.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtDateofMem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDateofMemActionPerformed(evt);
            }
        });
        getContentPane().add(txtDateofMem);
        txtDateofMem.setBounds(400, 360, 200, 30);

        txtPhone.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtPhone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPhoneActionPerformed(evt);
            }
        });
        getContentPane().add(txtPhone);
        txtPhone.setBounds(400, 280, 200, 28);

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/LibraryDatabase/abstract-blur-defocused-bookshelf-library.jpg"))); // NOI18N
        jLabel9.setText("jLabel9");
        jLabel9.setMaximumSize(new java.awt.Dimension(1000, 536));
        jLabel9.setPreferredSize(new java.awt.Dimension(1000, 536));
        getContentPane().add(jLabel9);
        jLabel9.setBounds(0, 0, 1000, 540);

        getAccessibleContext().setAccessibleParent(btnAddNewLibMem);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtLnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtLnameActionPerformed

    // verify valid entry of integer values
    public boolean isInteger(String s) {
        try {
            Integer.parseInt(s);
            return true;
        } catch (NumberFormatException ex) {
            return false;
        }
    }

    // verify valid entry of double values
    public boolean isDouble(String s) {
        try {
            Double.parseDouble(s);
            return true;
        } catch (NumberFormatException ex) {
            return false;
        }
    }
    
    public boolean isIntPositive(String s) {
        try {
            int n = Integer.parseInt(s);
            if (n > 0)
                return true;
            else
                return false;
        } catch (NumberFormatException ex) {
            return false;
        }
    }

    void clearErrorLabels() { // clear all labels used to display error messages 
        lblMemIDError.setText("");
        lblMemIDError.setVisible(false);
        lblFnameError.setText("");
        lblFnameError.setVisible(false);
        lblLnameError.setText("");
        lblLnameError.setVisible(false);
        lblPhoneError.setText("");
        lblPhoneError.setVisible(false);
        lblAddressError.setText("");
        lblAddressError.setVisible(false);
        lblDateofMemError.setText("");
        lblDateofMemError.setVisible(false);
    }

    // validate all user entry before sending new employee details to DB
    boolean isValidData() {
        clearErrorLabels();
        boolean result = true; // assume all details are true, set to false if otherwise 
        // you need to check format deails and make sure they are consistent with DB 
        if (txtMemberID.getText().trim().isEmpty() || (txtMemberID.getText().trim().length() > 4) || !isIntPositive(txtMemberID.getText().trim())) {
            if (txtMemberID.getText().trim().isEmpty()) {
                lblMemIDError.setText("Invalid. Cannot be empty.");
            } else if (txtMemberID.getText().trim().length() > 4){
                lblMemIDError.setText("Invalid. Must be <4 characters.");
            }
            else if (!isIntPositive(txtMemberID.getText().trim())){
                lblMemIDError.setText("Invalid. Must be positive integer.");
            }
            lblMemIDError.setVisible(true);
            result = false;
        }

        if (txtFname.getText().trim().isEmpty() || (txtFname.getText().trim().length() > 25)) {
            if (txtFname.getText().trim().isEmpty()) {
                lblFnameError.setText("Invalid. Cannot be empty.");
            } else if ((txtFname.getText().trim().length() > 25)) {
                lblFnameError.setText("Invalid. Must be < 25 chars.");
            }
            lblFnameError.setVisible(true);
            result = false;
        }

        if (txtLname.getText().trim().isEmpty() || (txtLname.getText().trim().length() > 25)) {
            if (txtLname.getText().trim().isEmpty()) {
                lblLnameError.setText("Invalid. Cannot be empty.");
            } else if (txtLname.getText().trim().length() > 25) {
                lblLnameError.setText("Invalid. Must be < 25 chars.");
            }
            lblLnameError.setVisible(true);
            result = false;
        }

        if (txtPhone.getText().trim().isEmpty() || (txtPhone.getText().trim().length() > 10)) {
            if (txtPhone.getText().trim().isEmpty()) {
                lblPhoneError.setText("Invalid. Cannot be empty.");
            } else if (txtPhone.getText().trim().length() > 10) {
                lblPhoneError.setText("Invalid. Must be < 10 chars.");
            }
            lblPhoneError.setVisible(true);
            result = false;
        }

        if (txtAddress.getText().trim().isEmpty() || (txtAddress.getText().trim().length() > 40)) {
            if (txtAddress.getText().trim().isEmpty()) {
                lblAddressError.setText("Invalid. Cannot be empty.");
            } else if (txtAddress.getText().trim().length() > 40){
                lblAddressError.setText("Invalid. Must be <40.");
            }
            lblAddressError.setVisible(true);
            result = false;
        }

        
        if (txtDateofMem.getText().trim().isEmpty()) {
            lblDateofMemError.setText("Invalid. Cannot be empty.");
            lblDateofMemError.setVisible(true);
            result = false;
        }

        return result;
    }

    void clearInputBoxes() { // clear for every new entry 
        txtMemberID.setText("");
        txtFname.setText("");
        txtLname.setText("");
        txtPhone.setText("");
        txtAddress.setText("");
        txtDateofMem.setText("");
    }

    private boolean isDuplicate(String member_id) throws SQLException {
        boolean isduplicate = false;
        //checking for duplicates if member_id already exists in library_member table
        String stmtSQL = "SELECT member_id FROM library_member WHERE member_id = " + member_id;
        rs = dbCon.executeStatement(stmtSQL);
        // isBeforeFirst() returns false if there are no data in the resultset
        isduplicate = rs.isBeforeFirst();

        return isduplicate;
    }
    private void btnAddNewLibMemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewLibMemActionPerformed
        // TODO add your handling code here:

        try {
            /*
                * you need also to verify that the member_id is unique and not duplicate 
                *
             */
            if (isValidData() && !isDuplicate(txtMemberID.getText().trim())) {
                // if new member details are valid, then add new member to DB
                
                // to retrieve the department number from name in the combo box
//                rs = dbCon.executeStatement("SELECT deptno FROM dept WHERE dname = '" + cmbDeptno.getSelectedItem() + "'");
//                rs.first();
//                String deptno = rs.getString("deptno");
                
                //inserting the employee into the table
                String prepSQL = "INSERT INTO library_member (MEMBER_ID, FNAME, LNAME, PHONE, ADDRESS, DATE_OF_MEMBERSHIP) VALUES ('"
                        + txtMemberID.getText().trim() + "', "
                        + "'" + txtFname.getText().toUpperCase() + "', "
                        + "'" + txtLname.getText().toUpperCase() + "', "
                        + "'" + txtPhone.getText().trim() + "',"+ "'" 
                        + txtAddress.getText().toUpperCase() + "', to_date('"
                        + txtDateofMem.getText() + "', 'yyyy-mm-dd'))";
                
                int result = dbCon.executePrepared(prepSQL);
                if (result > 0) {

                    javax.swing.JLabel label = new javax.swing.JLabel("New member added successfully.");
                    label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                    JOptionPane.showMessageDialog(null, label, "SUCCESS", JOptionPane.INFORMATION_MESSAGE);
                    clearInputBoxes();
                } else {

                }

                rs.close();
            } else {
                if (!isDuplicate(txtMemberID.getText().trim())) {
                    javax.swing.JLabel label = new javax.swing.JLabel("Please fix validation errors...");
                    label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                    JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);
                } else {
                    javax.swing.JLabel label = new javax.swing.JLabel("Member_ID Already exists. Use a different Member ID number.");
                    label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                    JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.INFORMATION_MESSAGE);
                    // check validation errors 
                }

            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error adding new member.");
        }
    }//GEN-LAST:event_btnAddNewLibMemActionPerformed

    private void txtMemberIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMemberIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMemberIDActionPerformed

    private void txtDateofMemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDateofMemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDateofMemActionPerformed

    private void txtPhoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPhoneActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPhoneActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddNewLibMem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel lblAddressError;
    private javax.swing.JLabel lblDateofMemError;
    private javax.swing.JLabel lblFnameError;
    private javax.swing.JLabel lblLnameError;
    private javax.swing.JLabel lblMemIDError;
    private javax.swing.JLabel lblPhoneError;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JFormattedTextField txtDateofMem;
    private javax.swing.JTextField txtFname;
    private javax.swing.JTextField txtLname;
    private javax.swing.JTextField txtMemberID;
    private javax.swing.JTextField txtPhone;
    // End of variables declaration//GEN-END:variables
}
