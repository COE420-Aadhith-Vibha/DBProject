package LibraryDatabase;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import java.util.*;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author wissam
 */
public class UpdateDeleteLibMember extends javax.swing.JFrame {

    myDBCon dbCon;
    ResultSet rs;
    
    /**
     * Creates new form AddEmployee
     */
    public UpdateDeleteLibMember() {
        initComponents();
        
        // center form in screen 
        this.setLocationRelativeTo(null);
        
        // set all error labels to invisible
        lblMemIDError.setVisible(false);
        lblFnameError.setVisible(false);
        lblLnameError.setVisible(false);
        lblDateofMemError.setVisible(false);
        lblPhoneError.setVisible(false);
        lblAddressError.setVisible(false);

        dbCon = new myDBCon();
        getNewData();
      
    }

    private void getNewData() {

        try {
            String str;
            rs = dbCon.executeStatement("SELECT MEMBER_ID, FNAME, LNAME, PHONE, ADDRESS, DATE_OF_MEMBERSHIP FROM library_member ORDER BY member_id ASC ");

            // populate fields
            rs.beforeFirst();
            rs.first();
            populateFields();
        } catch (SQLException e) {
            javax.swing.JLabel label = new javax.swing.JLabel("SQL Error - Display selected Member ID.");
            label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
            JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtFname = new javax.swing.JTextField();
        txtLname = new javax.swing.JTextField();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        txtMemberID = new javax.swing.JTextField();
        btnNext = new javax.swing.JButton();
        btnPrevious = new javax.swing.JButton();
        lblMemIDError = new javax.swing.JLabel();
        lblFnameError = new javax.swing.JLabel();
        lblLnameError = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtDateofMem = new javax.swing.JTextField();
        lblDateofMemError = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtPhone = new javax.swing.JTextField();
        txtAddress = new javax.swing.JTextField();
        lblPhoneError = new javax.swing.JLabel();
        lblAddressError = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Update/Delete Department");
        setMaximumSize(new java.awt.Dimension(1000, 536));
        setMinimumSize(new java.awt.Dimension(1000, 536));
        setPreferredSize(new java.awt.Dimension(1000, 536));
        setResizable(false);
        getContentPane().setLayout(null);

        jLabel1.setFont(new java.awt.Font("Baskerville Old Face", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Update or Delete Library Member");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(230, 50, 610, 36);

        jLabel2.setFont(new java.awt.Font("Baskerville Old Face", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Member ID:");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(310, 170, 120, 19);

        jLabel3.setFont(new java.awt.Font("Baskerville Old Face", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("First Name:");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(314, 210, 110, 19);

        jLabel4.setFont(new java.awt.Font("Baskerville Old Face", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Last Name:");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(320, 250, 110, 19);

        txtFname.setFont(new java.awt.Font("Eras Demi ITC", 0, 18)); // NOI18N
        txtFname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFnameActionPerformed(evt);
            }
        });
        getContentPane().add(txtFname);
        txtFname.setBounds(440, 210, 200, 28);

        txtLname.setFont(new java.awt.Font("Eras Demi ITC", 0, 18)); // NOI18N
        txtLname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLnameActionPerformed(evt);
            }
        });
        getContentPane().add(txtLname);
        txtLname.setBounds(440, 250, 200, 28);

        btnUpdate.setFont(new java.awt.Font("Baskerville Old Face", 1, 24)); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        getContentPane().add(btnUpdate);
        btnUpdate.setBounds(420, 430, 120, 31);

        btnDelete.setFont(new java.awt.Font("Baskerville Old Face", 1, 24)); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        getContentPane().add(btnDelete);
        btnDelete.setBounds(550, 430, 110, 31);

        txtMemberID.setEditable(false);
        txtMemberID.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        getContentPane().add(txtMemberID);
        txtMemberID.setBounds(440, 170, 200, 28);

        btnNext.setFont(new java.awt.Font("Baskerville Old Face", 1, 24)); // NOI18N
        btnNext.setText("Next >>");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });
        getContentPane().add(btnNext);
        btnNext.setBounds(670, 430, 140, 31);

        btnPrevious.setFont(new java.awt.Font("Baskerville Old Face", 1, 24)); // NOI18N
        btnPrevious.setText("<< Previous");
        btnPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreviousActionPerformed(evt);
            }
        });
        getContentPane().add(btnPrevious);
        btnPrevious.setBounds(220, 430, 190, 31);

        lblMemIDError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblMemIDError.setForeground(new java.awt.Color(255, 0, 0));
        lblMemIDError.setText("error label");
        getContentPane().add(lblMemIDError);
        lblMemIDError.setBounds(650, 170, 200, 22);

        lblFnameError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblFnameError.setForeground(new java.awt.Color(255, 0, 0));
        lblFnameError.setText("error label");
        getContentPane().add(lblFnameError);
        lblFnameError.setBounds(650, 210, 200, 22);

        lblLnameError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblLnameError.setForeground(new java.awt.Color(255, 0, 0));
        lblLnameError.setText("error label");
        getContentPane().add(lblLnameError);
        lblLnameError.setBounds(650, 250, 200, 22);

        jLabel5.setFont(new java.awt.Font("Baskerville Old Face", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Date of Membership:");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(240, 370, 190, 19);

        txtDateofMem.setEditable(false);
        txtDateofMem.setFont(new java.awt.Font("Eras Demi ITC", 0, 18)); // NOI18N
        txtDateofMem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDateofMemActionPerformed(evt);
            }
        });
        getContentPane().add(txtDateofMem);
        txtDateofMem.setBounds(440, 370, 200, 28);

        lblDateofMemError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblDateofMemError.setForeground(new java.awt.Color(255, 0, 0));
        lblDateofMemError.setText("error label");
        getContentPane().add(lblDateofMemError);
        lblDateofMemError.setBounds(650, 370, 448, 22);

        jLabel6.setFont(new java.awt.Font("Baskerville Old Face", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Phone:");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(360, 290, 70, 19);

        jLabel7.setFont(new java.awt.Font("Baskerville Old Face", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Address:");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(350, 330, 90, 19);

        txtPhone.setFont(new java.awt.Font("Eras Demi ITC", 0, 18)); // NOI18N
        txtPhone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPhoneActionPerformed(evt);
            }
        });
        getContentPane().add(txtPhone);
        txtPhone.setBounds(440, 290, 200, 28);

        txtAddress.setFont(new java.awt.Font("Eras Demi ITC", 0, 18)); // NOI18N
        txtAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAddressActionPerformed(evt);
            }
        });
        getContentPane().add(txtAddress);
        txtAddress.setBounds(440, 330, 200, 28);

        lblPhoneError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblPhoneError.setForeground(new java.awt.Color(255, 0, 0));
        lblPhoneError.setText("error label");
        getContentPane().add(lblPhoneError);
        lblPhoneError.setBounds(650, 290, 448, 22);

        lblAddressError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblAddressError.setForeground(new java.awt.Color(255, 0, 0));
        lblAddressError.setText("error label");
        getContentPane().add(lblAddressError);
        lblAddressError.setBounds(650, 330, 448, 22);

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/LibraryDatabase/abstract-blur-defocused-bookshelf-library.jpg"))); // NOI18N
        jLabel8.setText("jLabel8");
        getContentPane().add(jLabel8);
        jLabel8.setBounds(0, 0, 1000, 550);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtLnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtLnameActionPerformed

    private void populateFields() {
        try {
            txtMemberID.setText(rs.getString("MEMBER_ID"));
            txtFname.setText(rs.getString("FNAME"));
            txtLname.setText(rs.getString("LNAME"));
            txtPhone.setText(rs.getString("PHONE"));
            txtAddress.setText(rs.getString("ADDRESS"));
            txtDateofMem.setText(rs.getString("DATE_OF_MEMBERSHIP"));
            
            EnableDisableButtons();
        } catch (SQLException ex) {
            Logger.getLogger(UpdateDeleteLibMember.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void MoveNext() {
        try {
            // TODO add your handling code here:
            if (!rs.isLast()) {
                rs.next();
                populateFields();
            }
        } catch (SQLException ex) {
            Logger.getLogger(UpdateDeleteLibMember.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        MoveNext();
    }//GEN-LAST:event_btnNextActionPerformed

    private void MovePrevious() {
        try {
            // TODO add your handling code here:
            if (!rs.isFirst()) {
                rs.previous();
                populateFields();
            }
        } catch (SQLException ex) {
            Logger.getLogger(UpdateDeleteLibMember.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void EnableDisableButtons() {
        try {
            if (rs.isFirst()) {
                btnPrevious.setEnabled(false);
            } else {
                btnPrevious.setEnabled(true);
            }
            if (rs.isLast()) {
                btnNext.setEnabled(false);
            } else {
                btnNext.setEnabled(true);
            }
        } catch (SQLException ex) {
            Logger.getLogger(UpdateDeleteLibMember.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void btnPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreviousActionPerformed
        // TODO add your handling code here:
        MovePrevious();
    }//GEN-LAST:event_btnPreviousActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        try {
            // make the result set scrolable forward/backward updatable
            
            // creating message dialog for confirmation
            int a = JOptionPane.showConfirmDialog(null, "Confirm to Delete the requested Member");
            if (a == JOptionPane.YES_OPTION)
            {
                String memnumber = txtMemberID.getText().trim();
                String prepSQL = "DELETE LIBRARY_MEMBER WHERE MEMBER_ID ='" + memnumber+"'";
                
                String prepcheck = "SELECT * FROM LIBRARY_MEMBER WHERE MEMBER_ID = '" + txtMemberID.getText().trim()+"'";
                int rscheck = dbCon.executePrepared(prepcheck);
                
                if (rscheck == 0)
                {
                    int result1 = dbCon.executePrepared(prepSQL);
                    if (result1 > 0) {
                        javax.swing.JLabel label = new javax.swing.JLabel("Member No " + txtMemberID.getText().trim() + " deleted successfully.");
                        label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                        JOptionPane.showMessageDialog(null, label, "DELETION SUCCESSFUL", JOptionPane.INFORMATION_MESSAGE);
                        getNewData();
                   }
                }
                else
                {
                    javax.swing.JLabel label = new javax.swing.JLabel("Member deletion was unsuccessful.");
                    label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                    JOptionPane.showMessageDialog(null, label, "DELETION UNSUCCESSFUL", JOptionPane.INFORMATION_MESSAGE);
                }
            }
            else
            {
                javax.swing.JLabel label = new javax.swing.JLabel("Member was not Deleted.");
                label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                JOptionPane.showMessageDialog(null, label, "DELETION UNSUCCESSFUL", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error Deleting Member.");
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    void clearErrorLabels() {
        lblMemIDError.setText("");
        lblMemIDError.setVisible(false);
        lblFnameError.setText("");
        lblFnameError.setVisible(false);
        lblLnameError.setText("");
        lblLnameError.setVisible(false);
        lblDateofMemError.setText("");
        lblDateofMemError.setVisible(false);
        lblPhoneError.setText("");
        lblPhoneError.setVisible(false);
        lblAddressError.setText("");
        lblAddressError.setVisible(false);
    }

    public boolean isInteger(String s) {
        try {
            Integer.parseInt(s);
            return true;
        } catch (NumberFormatException ex) {
            return false;
        }
    }

    public boolean isDouble(String s) {
        try {
            Double.parseDouble(s);
            return true;
        } catch (NumberFormatException ex) {
            return false;
        }
    }
    
    public boolean isIntPositive(String s) {
        try {
            int n = Integer.parseInt(s);
            if (n > 0)
                return true;
            else
                return false;
        } catch (NumberFormatException ex) {
            return false;
        }
    }

    
//CHANGE VARS AND MAYBE DATA CONSTRAINTS....
    boolean isValidData() {
        clearErrorLabels();
        boolean result = true;
        if (txtMemberID.getText().trim().isEmpty() || !isIntPositive(txtMemberID.getText().trim()) || txtMemberID.getText().trim().length() >4) {
            if (txtMemberID.getText().trim().isEmpty()) {
                lblMemIDError.setText("Invalid. Cannot be empty.");
            } else if (!isInteger(txtMemberID.getText().trim())) {
                lblMemIDError.setText("Invalid. Must be integer.");
            } else if (txtMemberID.getText().trim().length() >4)
                lblMemIDError.setText("Invalid. Must be <4 numbers.");
            lblMemIDError.setVisible(true);
            result = false;
        }
        if (txtFname.getText().trim().isEmpty() || (txtFname.getText().trim().length() > 25)) {
            if (txtFname.getText().trim().isEmpty()) {
                lblFnameError.setText("Invalid. Cannot be empty.");
            } else if ((txtFname.getText().trim().length() > 25)) {
                lblFnameError.setText("Invalid. Must be < 25 characters.");
            }

            lblFnameError.setVisible(true);
            result = false;
        }

        if (txtLname.getText().trim().isEmpty() || (txtLname.getText().trim().length() > 25)) {
            if (txtLname.getText().trim().isEmpty()) {
                lblLnameError.setText("Invalid. Cannot be empty.");
            } else if (txtLname.getText().trim().length() > 25) {
                lblLnameError.setText("Invalid. Must be < 25 characters.");
            }
            lblLnameError.setVisible(true);
            result = false;
        }
        
        if (txtDateofMem.getText().trim().isEmpty()) {
            lblDateofMemError.setText("Invalid. Cannot be empty.");
            lblDateofMemError.setVisible(true);
            result = false;
        }
        
        if (txtPhone.getText().trim().isEmpty()) {
            lblPhoneError.setText("Invalid. Cannot be empty.");
            lblPhoneError.setVisible(true);
            result = false;
        }

        if (txtAddress.getText().trim().isEmpty() || (txtAddress.getText().trim().length() > 40)) {
            if (txtAddress.getText().trim().isEmpty()) {
                lblAddressError.setText("Invalid. Cannot be empty.");
            } else if (txtAddress.getText().trim().length() > 40){
                lblAddressError.setText("Invalid. Must be <40.");
            }
            lblAddressError.setVisible(true);
            result = false;
        }
        return result;
    }

    
//CHANGE STATEMENTS
    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:

        try {
            // make the result set scrolable forward/backward updatable
//            statement = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String prepemp;
            int a = JOptionPane.showConfirmDialog(null, "Confirm to Update the requested Member");
            if (a == JOptionPane.YES_OPTION)
            {
//                String memnumber;
//                String oldmemnumber = "";
//                Boolean memnochange;
//                if (txtDateofMem.getText().trim().isEmpty())
//                {
//                    deptnumber = txtMemberID.getText().trim();
//                    deptnochange = false;
//                }
//                else
//                {
//                    deptnumber = txtDateofMem.getText().trim();
//                    olddeptnumber = txtMemberID.getText().trim();
//                    deptnochange = true;
//                }
                
                if (isValidData()) {
                    String prepSQL = "UPDATE library_member SET member_id = '" + 
                             txtMemberID.getText().trim() + 
                            "', fname = '"+txtFname.getText().trim().toUpperCase() + 
                            "', lname = '" + txtLname.getText().trim().toUpperCase() +
                            "', phone = '" + txtPhone.getText().trim() +
                            "', address = '" + txtAddress.getText().trim().toUpperCase() +
                            "' WHERE member_id = " + txtMemberID.getText().trim();
                    int result = dbCon.executePrepared(prepSQL);
//                    if (deptnochange == true){
//                        prepemp = "UPDATE emp SET emp.deptno = " + deptnumber + " where emp.deptno = " + olddeptnumber;
//                        dbCon.executePrepared(prepemp);
//                    }
                    
                    if (result > 0) {

                        javax.swing.JLabel label = new javax.swing.JLabel("Member ID " + txtMemberID.getText() + " updated successfully.");
                        label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                        JOptionPane.showMessageDialog(null, label, "UPDATE SUCCESSFUL", JOptionPane.INFORMATION_MESSAGE);

                        getNewData();
                        //txtDateofMem.setText(""); //sets the newdeptno text field as a blank text field again

                    } else {
                        // check validation errors 
                    }
    //                prepStatement.close();
                } else {
                    javax.swing.JLabel label = new javax.swing.JLabel("Please fix validation errors...");
                    label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                    JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);

                }
            }
            else
            {
                javax.swing.JLabel label = new javax.swing.JLabel("Member was not Updated.");
                label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                JOptionPane.showMessageDialog(null, label, "UPDATE UNSUCCESSFUL", JOptionPane.INFORMATION_MESSAGE);

            }

        } catch (SQLException e) {

            JOptionPane.showMessageDialog(null, "Error updating member." + e.getMessage());

        }
        
        
        
        
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void txtDateofMemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDateofMemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDateofMemActionPerformed

    private void txtFnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFnameActionPerformed

    private void txtPhoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPhoneActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPhoneActionPerformed

    private void txtAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAddressActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAddressActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrevious;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel lblAddressError;
    private javax.swing.JLabel lblDateofMemError;
    private javax.swing.JLabel lblFnameError;
    private javax.swing.JLabel lblLnameError;
    private javax.swing.JLabel lblMemIDError;
    private javax.swing.JLabel lblPhoneError;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextField txtDateofMem;
    private javax.swing.JTextField txtFname;
    private javax.swing.JTextField txtLname;
    private javax.swing.JTextField txtMemberID;
    private javax.swing.JTextField txtPhone;
    // End of variables declaration//GEN-END:variables
}