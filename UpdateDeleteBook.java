package jdbcgui;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import java.util.*;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author wissam
 */
public class UpdateDeleteBook extends javax.swing.JFrame {

    myDBCon dbCon;
    ResultSet rs;
    ResultSet rsWritten_By;
    
    /**
     * Creates new form AddEmployee
     */
    public UpdateDeleteBook() {
        initComponents();
        
        // center form in screen 
        this.setLocationRelativeTo(null);
        
        // set all error labels to invisible
        lblErrorAuthorEmail.setVisible(false);
        lblErrorAuthorId.setVisible(false);
        lblErrorAuthorName.setVisible(false);
        lblErrorBookId.setVisible(false);
        lblErrorLanguage.setVisible(false);
        lblErrorNumCpy.setVisible(false);
        lblErrorPublishedDate.setVisible(false);
        lblErrorTitle.setVisible(false);
        dbCon = new myDBCon();
        getNewData();
    }

    private void getNewData() {

        try {
            rs = dbCon.executeStatement("SELECT W.BOOK_ID, B.BOOK_TITLE, B.GENRE, B.NO_OF_COPIES, B.LANGUAGE, W.AUTHOR_ID, A.AUTHOR_NAME, A.EMAIL, W.PUBLISHED_DATE FROM WRITTEN_BY W INNER JOIN BOOK B ON (W.BOOK_ID = B.BOOK_ID) INNER JOIN AUTHOR A ON (A.AUTHOR_ID = W.AUTHOR_ID) ORDER BY W.BOOK_ID ASC");
            rs.first();
            populateFields();
        } catch (SQLException e) {
            javax.swing.JLabel label = new javax.swing.JLabel("SQL Error - Display selected empno.");
            label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
            JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtTitle = new javax.swing.JTextField();
        txtNumCpy = new javax.swing.JTextField();
        txtPublishedDate = new javax.swing.JTextField();
        txtAuthorId = new javax.swing.JTextField();
        cmbGenre = new javax.swing.JComboBox<>();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        txtBookId = new javax.swing.JTextField();
        btnNext = new javax.swing.JButton();
        btnPrevious = new javax.swing.JButton();
        lblErrorBookId = new javax.swing.JLabel();
        lblErrorTitle = new javax.swing.JLabel();
        lblErrorNumCpy = new javax.swing.JLabel();
        lblErrorLanguage = new javax.swing.JLabel();
        lblErrorPublishedDate = new javax.swing.JLabel();
        lblErrorAuthorId = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtAuthorEmail = new javax.swing.JTextField();
        txtAuthorName = new javax.swing.JTextField();
        txtLanguage = new javax.swing.JTextField();
        lblErrorAuthorName = new javax.swing.JLabel();
        lblErrorAuthorEmail = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Update/Delete Employee");
        setResizable(false);
        getContentPane().setLayout(null);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setText("Update/Delete Books");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(310, 20, 389, 44);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Book ID:");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(320, 90, 90, 22);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setText("Title:");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(350, 120, 50, 22);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setText("Genre:");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(340, 160, 62, 22);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setText("Number of Copies:");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(230, 190, 180, 22);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel6.setText("Language:");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(310, 230, 110, 22);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel7.setText("Published Date:");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(260, 260, 160, 22);

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel8.setText("Author ID:");
        getContentPane().add(jLabel8);
        jLabel8.setBounds(310, 300, 110, 22);

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel9.setText("Author Name:");
        getContentPane().add(jLabel9);
        jLabel9.setBounds(280, 330, 130, 22);

        txtTitle.setFont(new java.awt.Font("Eras Demi ITC", 0, 18)); // NOI18N
        getContentPane().add(txtTitle);
        txtTitle.setBounds(410, 120, 200, 28);

        txtNumCpy.setFont(new java.awt.Font("Eras Demi ITC", 0, 18)); // NOI18N
        txtNumCpy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNumCpyActionPerformed(evt);
            }
        });
        getContentPane().add(txtNumCpy);
        txtNumCpy.setBounds(410, 190, 200, 28);

        txtPublishedDate.setFont(new java.awt.Font("Eras Demi ITC", 0, 18)); // NOI18N
        getContentPane().add(txtPublishedDate);
        txtPublishedDate.setBounds(410, 260, 200, 28);

        txtAuthorId.setEditable(false);
        txtAuthorId.setFont(new java.awt.Font("Eras Demi ITC", 0, 18)); // NOI18N
        getContentPane().add(txtAuthorId);
        txtAuthorId.setBounds(410, 290, 200, 28);

        cmbGenre.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cmbGenre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Mystery", "Thriller", "Fiction", "Non-Fiction", "Romance" }));
        cmbGenre.setSelectedIndex(-1);
        cmbGenre.setToolTipText("");
        cmbGenre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbGenreActionPerformed(evt);
            }
        });
        getContentPane().add(cmbGenre);
        cmbGenre.setBounds(410, 160, 200, 28);

        btnUpdate.setFont(new java.awt.Font("Forte", 0, 24)); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        getContentPane().add(btnUpdate);
        btnUpdate.setBounds(400, 410, 110, 41);

        btnDelete.setFont(new java.awt.Font("Forte", 0, 24)); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        getContentPane().add(btnDelete);
        btnDelete.setBounds(520, 410, 100, 41);

        txtBookId.setEditable(false);
        txtBookId.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        getContentPane().add(txtBookId);
        txtBookId.setBounds(410, 90, 200, 28);

        btnNext.setFont(new java.awt.Font("Forte", 0, 24)); // NOI18N
        btnNext.setText("Next >>");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });
        getContentPane().add(btnNext);
        btnNext.setBounds(630, 410, 120, 41);

        btnPrevious.setFont(new java.awt.Font("Forte", 0, 24)); // NOI18N
        btnPrevious.setText("<< Previous");
        btnPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreviousActionPerformed(evt);
            }
        });
        getContentPane().add(btnPrevious);
        btnPrevious.setBounds(230, 410, 160, 41);

        lblErrorBookId.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblErrorBookId.setForeground(new java.awt.Color(255, 0, 0));
        lblErrorBookId.setText("error label");
        getContentPane().add(lblErrorBookId);
        lblErrorBookId.setBounds(620, 90, 200, 22);

        lblErrorTitle.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblErrorTitle.setForeground(new java.awt.Color(255, 0, 0));
        lblErrorTitle.setText("error label");
        getContentPane().add(lblErrorTitle);
        lblErrorTitle.setBounds(620, 130, 200, 22);

        lblErrorNumCpy.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblErrorNumCpy.setForeground(new java.awt.Color(255, 0, 0));
        lblErrorNumCpy.setText("error label");
        getContentPane().add(lblErrorNumCpy);
        lblErrorNumCpy.setBounds(620, 190, 200, 22);

        lblErrorLanguage.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblErrorLanguage.setForeground(new java.awt.Color(255, 0, 0));
        lblErrorLanguage.setText("error label");
        getContentPane().add(lblErrorLanguage);
        lblErrorLanguage.setBounds(620, 230, 200, 22);

        lblErrorPublishedDate.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblErrorPublishedDate.setForeground(new java.awt.Color(255, 0, 0));
        lblErrorPublishedDate.setText("error label");
        getContentPane().add(lblErrorPublishedDate);
        lblErrorPublishedDate.setBounds(620, 260, 200, 22);

        lblErrorAuthorId.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblErrorAuthorId.setForeground(new java.awt.Color(255, 0, 0));
        lblErrorAuthorId.setText("error label");
        getContentPane().add(lblErrorAuthorId);
        lblErrorAuthorId.setBounds(620, 300, 200, 22);

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel10.setText("Author Email:");
        getContentPane().add(jLabel10);
        jLabel10.setBounds(280, 360, 140, 22);

        txtAuthorEmail.setEditable(false);
        txtAuthorEmail.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        getContentPane().add(txtAuthorEmail);
        txtAuthorEmail.setBounds(410, 360, 200, 28);

        txtAuthorName.setEditable(false);
        txtAuthorName.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        getContentPane().add(txtAuthorName);
        txtAuthorName.setBounds(410, 330, 200, 28);

        txtLanguage.setFont(new java.awt.Font("Eras Demi ITC", 0, 18)); // NOI18N
        getContentPane().add(txtLanguage);
        txtLanguage.setBounds(410, 230, 200, 28);

        lblErrorAuthorName.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblErrorAuthorName.setForeground(new java.awt.Color(255, 0, 0));
        lblErrorAuthorName.setText("error label");
        getContentPane().add(lblErrorAuthorName);
        lblErrorAuthorName.setBounds(620, 330, 200, 22);

        lblErrorAuthorEmail.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblErrorAuthorEmail.setForeground(new java.awt.Color(255, 0, 0));
        lblErrorAuthorEmail.setText("error label");
        getContentPane().add(lblErrorAuthorEmail);
        lblErrorAuthorEmail.setBounds(620, 370, 200, 22);

        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jdbcgui/book.jpg"))); // NOI18N
        jLabel11.setText("jLabel11");
        getContentPane().add(jLabel11);
        jLabel11.setBounds(-90, -40, 1270, 610);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtNumCpyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNumCpyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNumCpyActionPerformed

    private void populateFields() {
        try {
            txtBookId.setText(rs.getString("BOOK_ID"));
            txtTitle.setText(rs.getString("BOOK_TITLE"));
            cmbGenre.setSelectedItem(rs.getString("GENRE"));
            txtNumCpy.setText(rs.getString("NO_OF_COPIES"));
            txtLanguage.setText(rs.getString("LANGUAGE"));
            txtAuthorId.setText(rs.getString("AUTHOR_ID"));
            txtAuthorName.setText(rs.getString("AUTHOR_NAME"));
            txtAuthorEmail.setText(rs.getString("EMAIL"));
            txtPublishedDate.setText(rs.getString("PUBLISHED_DATE"));    
            EnableDisableButtons();
        } catch (SQLException ex) {
            Logger.getLogger(UpdateDeleteBook.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void MoveNext() {
        try {
            // TODO add your handling code here:
            if (!rs.isLast()) {
                rs.next();
                populateFields();
            }
        } catch (SQLException ex) {
            Logger.getLogger(UpdateDeleteBook.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        MoveNext();
    }//GEN-LAST:event_btnNextActionPerformed

    private void MovePrevious() {
        try {
            // TODO add your handling code here:
            if (!rs.isFirst()) {
                rs.previous();
                populateFields();
            }
        } catch (SQLException ex) {
            Logger.getLogger(UpdateDeleteBook.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void EnableDisableButtons() {
        try {
            if (rs.isFirst()) {
                btnPrevious.setEnabled(false);
            } else {
                btnPrevious.setEnabled(true);
            }
            if (rs.isLast()) {
                btnNext.setEnabled(false);
            } else {
                btnNext.setEnabled(true);
            }
        } catch (SQLException ex) {
            Logger.getLogger(UpdateDeleteBook.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void btnPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreviousActionPerformed
        // TODO add your handling code here:
        MovePrevious();
    }//GEN-LAST:event_btnPreviousActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        try {
            // make the result set scrolable forward/backward updatable
            
            int a = JOptionPane.showConfirmDialog(null, "Confirm to Delete the requested Book");
            if (a == JOptionPane.YES_OPTION)
            {
                String bookId = txtBookId.getText().trim();
                rsWritten_By = dbCon.executeStatement("SELECT BOOK_ID, AUTHOR_ID FROM WRITTEN_BY WHERE BOOK_ID = " + bookId);
                rsWritten_By.first();
                String authorId = rsWritten_By.getString("AUTHOR_ID");                
                rsWritten_By = dbCon.executeStatement("SELECT BOOK_ID, AUTHOR_ID FROM WRITTEN_BY WHERE AUTHOR_ID = " + authorId);
                rsWritten_By.beforeFirst();
                int count = 0;
                while (rs.next()) {
                    count++;
                }
                String prepSQL = "DELETE WRITTEN_BY WHERE BOOK_ID = " + bookId + "AND AUTHOR_ID = " + authorId;
                int result = dbCon.executePrepared(prepSQL);
                if (count == 1) {
                    prepSQL = "DELETE AUTHOR WHERE AUTHOR_ID = " + authorId;
                    result = dbCon.executePrepared(prepSQL);
                }
                prepSQL = "DELETE BOOK_COPIES WHERE BOOK_ID = " + bookId;
                result = dbCon.executePrepared(prepSQL);
                prepSQL = "DELETE BOOK WHERE BOOK_ID = " + bookId;
                result = dbCon.executePrepared(prepSQL);
                if (result > 0) {
                    javax.swing.JLabel label = new javax.swing.JLabel("Book ID " + bookId + " deleted successfully.");
                    label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                    JOptionPane.showMessageDialog(null, label, "DELETION SUCCESSFUL", JOptionPane.INFORMATION_MESSAGE);
                    getNewData();
                }
            }
            else
            {
                javax.swing.JLabel label = new javax.swing.JLabel("Book was not Deleted.");
                label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                JOptionPane.showMessageDialog(null, label, "DELETION UNSUCCESSFUL", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error deleting Book.");
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    void clearErrorLabels() {
        lblErrorBookId.setText("");
        lblErrorBookId.setVisible(false);
        lblErrorTitle.setText("");
        lblErrorTitle.setVisible(false);
        lblErrorNumCpy.setText("");
        lblErrorNumCpy.setVisible(false);
        lblErrorAuthorEmail.setText("");
        lblErrorAuthorEmail.setVisible(false);
        lblErrorAuthorId.setVisible(false);
        lblErrorAuthorId.setText("");
        lblErrorAuthorName.setVisible(false);
        lblErrorAuthorName.setText("");
        lblErrorLanguage.setVisible(false);
        lblErrorLanguage.setText("");
        lblErrorPublishedDate.setVisible(false);
        lblErrorPublishedDate.setText("");
    }

    public boolean isInteger(String s) {
        try {
            Integer.parseInt(s);
            return true;
        } catch (NumberFormatException ex) {
            return false;
        }
    }
    
    public boolean isIntPositive(String s) {
        try {
            int n = Integer.parseInt(s);
            if (n > 0)
                return true;
            else
                return false;
        } catch (NumberFormatException ex) {
            return false;
        }
    }

    // verify valid entry of double values
    public boolean isDouble(String s) {
        try {
            Double.parseDouble(s);
            return true;
        } catch (NumberFormatException ex) {
            return false;
        }
    }

    // validate all user entry before sending new employee details to DB
    boolean isValidData() {
        clearErrorLabels();
        boolean result = true; // assume all details are true, set to false if otherwise 
        // you need to check format deails and make sure they are consistent with DB 
        if (txtBookId.getText().trim().isEmpty() || (txtBookId.getText().trim().length() != 4) || !isIntPositive(txtBookId.getText().trim())) 
        {
            if (txtBookId.getText().trim().isEmpty()) {
                lblErrorBookId.setText("Invalid. Cannot be empty.");
            } else if (txtTitle.getText().trim().length() != 4) {
                lblErrorBookId.setText("Invalid. Must be 4 digits long.");
            } else if (!isIntPositive(txtBookId.getText()))
                lblErrorBookId.setText("Invalid. Must be 4 digit positive integers.");
            lblErrorBookId.setVisible(true);
            result = false;
        }

        if (txtTitle.getText().trim().isEmpty() || (txtTitle.getText().trim().length() > 25)) {
            if (txtTitle.getText().trim().isEmpty()) {
                lblErrorTitle.setText("Invalid. Cannot be empty.");
            } else if ((txtTitle.getText().trim().length() > 25)) {
                lblErrorTitle.setText("Invalid. Must be at most 25 characters long.");
            }
            lblErrorTitle.setVisible(true);
            result = false;
        }

        if (txtNumCpy.getText().trim().isEmpty() || !isIntPositive(txtNumCpy.getText().trim())) { //check for string
            if (txtNumCpy.getText().trim().isEmpty()) {
                lblErrorNumCpy.setText("Invalid. Cannot be empty.");
            } else if (!isIntPositive(txtNumCpy.getText().trim())) { 
                lblErrorNumCpy.setText("Invalid. Must be a positive integer value");
            }
            lblErrorNumCpy.setVisible(true);
            result = false;
        }
        
        if (txtAuthorId.getText().trim().isEmpty() || (txtAuthorId.getText().trim().length() != 4) || !isIntPositive(txtAuthorId.getText().trim())) 
        {
            if (txtAuthorId.getText().trim().isEmpty()) {
                lblErrorAuthorId.setText("Invalid. Cannot be empty.");
            } else if (txtAuthorId.getText().trim().length() != 4) {
                lblErrorAuthorId.setText("Invalid. Must be 4 digits long.");
            } else if (!isIntPositive(txtAuthorId.getText()))
                lblErrorAuthorId.setText("Invalid. Must be 4 digit positive integers.");
            lblErrorAuthorId.setVisible(true);
            result = false;
        }

        if (txtLanguage.getText().trim().isEmpty() || txtLanguage.getText().trim().length() > 20){
            if (txtLanguage.getText().trim().isEmpty()) {
                lblErrorLanguage.setText("Invalid. Cannot be empty.");
            } else if (txtLanguage.getText().trim().length() > 20) {
                lblErrorLanguage.setText("Invalid. Must be at most 20 characters long.");
            }
            lblErrorLanguage.setVisible(true);
            result = false;
        }

        if (txtAuthorName.getText().trim().isEmpty() || txtAuthorName.getText().trim().length() > 25){
            if (txtAuthorName.getText().trim().isEmpty()) {
                lblErrorAuthorName.setText("Invalid. Cannot be empty.");
            } else if (txtAuthorName.getText().trim().length() > 25) {
                lblErrorAuthorName.setText("Invalid. Must be at most 25 characters long.");
            }
            lblErrorAuthorName.setVisible(true);
            result = false;
        }

        if (txtAuthorEmail.getText().trim().isEmpty() || txtAuthorEmail.getText().trim().length() > 30){
            if (txtAuthorEmail.getText().trim().isEmpty()) {
                lblErrorAuthorEmail.setText("Invalid. Cannot be empty.");
            } else if (txtAuthorEmail.getText().trim().length() > 30) {
                lblErrorAuthorEmail.setText("Invalid. Must be at most 30 characters long.");
            }
            lblErrorAuthorEmail.setVisible(true);
            result = false;
        }
        
        if (txtPublishedDate.getText().trim().isEmpty()) {
            lblErrorPublishedDate.setText("Invalid. Cannot be empty.");
            lblErrorPublishedDate.setVisible(true);
            result = false;
        }
        
        return result;
    }

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
//-----------------------------------------------------------------------------------------------------------------------------|||||||||||
        try {
            // make the result set scrolable forward/backward updatable
//            statement = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
            int a = JOptionPane.showConfirmDialog(null, "Confirm to Update the requested Book");
            if (a == JOptionPane.YES_OPTION)
            {
                String bookId = txtBookId.getText().trim();
                rs = dbCon.executeStatement("SELECT NO_OF_COPIES FROM BOOK WHERE BOOK_ID = " + bookId);
                rs.first();
                int numcpy = Integer.parseInt(rs.getString("NO_OF_COPIES"));
                if (numcpy != Integer.parseInt(txtNumCpy.getText().trim()))
                {
                    numcpy = -1;
                    rs = dbCon.executeStatement("DELETE BOOK_COPIES WHERE BOOK_ID = " + bookId);
                }
                
                if (isValidData()) {
                    String prepSQL = "UPDATE BOOK SET BOOK_TITLE = " + 
                            "'" + txtTitle.getText().trim().toUpperCase() + 
                            "', GENRE = '" + cmbGenre.getSelectedItem().toString().toUpperCase() + 
                            "', NO_OF_COPIES = " + txtNumCpy.getText().trim() + 
                            ", LANGUAGE = '" + txtLanguage.getText().trim() +
                            "' WHERE BOOK_ID = " + txtBookId.getText().trim();
                    
                    int result = dbCon.executePrepared(prepSQL);
                    if (numcpy == -1)
                    {
                        for (int i = 1; i <= Integer.parseInt(txtNumCpy.getText().trim()); i++)
                        {
                            rs = dbCon.executeStatement("INSERT INTO BOOK_COPIES (COPY_ID, BOOK_ID) VALUES (" + String.valueOf(i) + ", " + txtBookId.getText().trim() +")");
                        }
                    }
                    if (result > 0) {

                        javax.swing.JLabel label = new javax.swing.JLabel("Book Id " + txtBookId.getText() + " updated successfully.");
                        label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                        JOptionPane.showMessageDialog(null, label, "UPDATE SUCCESSFUL", JOptionPane.INFORMATION_MESSAGE);

                        getNewData();

                    } else {
                        // check validation errors 
                    }
    //                prepStatement.close();
                } else {
                    javax.swing.JLabel label = new javax.swing.JLabel("Please fix validation errors...");
                    label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                    JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);

                }
            }
            else
            {
                javax.swing.JLabel label = new javax.swing.JLabel("Book was not Updated.");
                label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                JOptionPane.showMessageDialog(null, label, "UPDATE UNSUCCESSFUL", JOptionPane.INFORMATION_MESSAGE);

            }

        } catch (SQLException e) {

            JOptionPane.showMessageDialog(null, "Error updating employee." + e.getMessage());

        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void cmbGenreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbGenreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbGenreActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrevious;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cmbGenre;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel lblErrorAuthorEmail;
    private javax.swing.JLabel lblErrorAuthorId;
    private javax.swing.JLabel lblErrorAuthorName;
    private javax.swing.JLabel lblErrorBookId;
    private javax.swing.JLabel lblErrorLanguage;
    private javax.swing.JLabel lblErrorNumCpy;
    private javax.swing.JLabel lblErrorPublishedDate;
    private javax.swing.JLabel lblErrorTitle;
    private javax.swing.JTextField txtAuthorEmail;
    private javax.swing.JTextField txtAuthorId;
    private javax.swing.JTextField txtAuthorName;
    private javax.swing.JTextField txtBookId;
    private javax.swing.JTextField txtLanguage;
    private javax.swing.JTextField txtNumCpy;
    private javax.swing.JTextField txtPublishedDate;
    private javax.swing.JTextField txtTitle;
    // End of variables declaration//GEN-END:variables
}
