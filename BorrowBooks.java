package jdbcgui;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.ZoneOffset;
import java.util.Date;
import javax.swing.JOptionPane;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author wissam
 */
public class BorrowBooks extends javax.swing.JFrame {

    /**
     * Creates new form AddBooks
     */
    myDBCon dbCon;
    ResultSet rs;
    ResultSet rsBorrowed;
    ResultSet rsCopies;

    public BorrowBooks(String Member_id) {
        initComponents();
        this.setLocationRelativeTo(null); // center form in screen        
        txtMemberId.setText(Member_id);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtMemberId = new javax.swing.JTextField();
        txtLanguage = new javax.swing.JFormattedTextField();
        jLabel10 = new javax.swing.JLabel();
        txtPublishedDate = new javax.swing.JFormattedTextField();
        jLabel11 = new javax.swing.JLabel();
        cmbTitle = new javax.swing.JComboBox<>();
        txtAuthorName = new javax.swing.JFormattedTextField();
        txtGenre = new javax.swing.JTextField();
        btnBorrow = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Add New Employee");
        setResizable(false);
        getContentPane().setLayout(null);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setText("Borrow a Book");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(390, 20, 300, 44);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Member ID:");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(300, 110, 120, 20);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setText("Title:");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(360, 150, 60, 22);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setText("Genre:");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(350, 200, 62, 24);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel6.setText("Language:");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(320, 240, 100, 22);

        txtMemberId.setEditable(false);
        txtMemberId.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtMemberId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMemberIdActionPerformed(evt);
            }
        });
        getContentPane().add(txtMemberId);
        txtMemberId.setBounds(420, 110, 200, 28);

        txtLanguage.setEditable(false);
        txtLanguage.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd-MMM-yyyy"))));
        txtLanguage.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        getContentPane().add(txtLanguage);
        txtLanguage.setBounds(420, 240, 200, 28);

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel10.setText("Author Name:");
        getContentPane().add(jLabel10);
        jLabel10.setBounds(280, 330, 140, 22);

        txtPublishedDate.setEditable(false);
        txtPublishedDate.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd-MMM-yyyy"))));
        txtPublishedDate.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        getContentPane().add(txtPublishedDate);
        txtPublishedDate.setBounds(420, 280, 200, 28);

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel11.setText("Published Date:");
        getContentPane().add(jLabel11);
        jLabel11.setBounds(270, 280, 150, 22);

        cmbTitle.setSelectedIndex(-1);
        cmbTitle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbTitleActionPerformed(evt);
            }
        });
        getContentPane().add(cmbTitle);
        cmbTitle.setBounds(420, 150, 200, 22);

        txtAuthorName.setEditable(false);
        txtAuthorName.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd-MMM-yyyy"))));
        txtAuthorName.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        getContentPane().add(txtAuthorName);
        txtAuthorName.setBounds(420, 330, 200, 28);

        txtGenre.setEditable(false);
        txtGenre.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        getContentPane().add(txtGenre);
        txtGenre.setBounds(420, 200, 200, 28);

        btnBorrow.setFont(new java.awt.Font("Forte", 0, 24)); // NOI18N
        btnBorrow.setText("Borrow");
        btnBorrow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrowActionPerformed(evt);
            }
        });
        getContentPane().add(btnBorrow);
        btnBorrow.setBounds(450, 430, 104, 41);

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jdbcgui/book.jpg"))); // NOI18N
        getContentPane().add(jLabel7);
        jLabel7.setBounds(-60, -10, 1210, 610);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // verify valid entry of integer values
    public boolean isInteger(String s) {
        try {
            Integer.parseInt(s);
            return true;
        } catch (NumberFormatException ex) {
            return false;
        }
    }
    
    public boolean isIntPositive(String s) {
        try {
            int n = Integer.parseInt(s);
            return n > 0;
        } catch (NumberFormatException ex) {
            return false;
        }
    }

    // verify valid entry of double values
    public boolean isDouble(String s) {
        try {
            Double.parseDouble(s);
            return true;
        } catch (NumberFormatException ex) {
            return false;
        }
    }

    void clearErrorLabels() { // clear all labels used to display error messages         
        try {// populate the book titles combobox
            dbCon = new myDBCon();
            rs = dbCon.executeStatement("SELECT BOOK_ID, BOOK_TITLE FROM BOOK ORDER BY BOOK_ID ASC;");
            rs.beforeFirst();
            cmbTitle.removeAllItems();
            // populate user type combo box
            while (rs.next()) {
                String bookId = rs.getString("BOOK_ID");
                String prepSQL = "SELECT * FROM BOOK_COPIES WHERE BOOK_ID = " + bookId;
                rsCopies = dbCon.executeStatement(prepSQL);
                if (rsCopies.isBeforeFirst())
                    cmbTitle.addItem(rs.getString("BOOK_TITLE"));
            }
            cmbTitle.setSelectedIndex(-1);     //maybe this is not needed
        } catch (SQLException e) {
            System.out.println(e);
        }
    }

    void clearInputBoxes() { // clear for every new entry 
        cmbTitle.setSelectedIndex(-1);
        txtGenre.setText("");
        txtLanguage.setText("");
        txtPublishedDate.setText("");
        txtAuthorName.setText("");
    }

    private void txtMemberIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMemberIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMemberIdActionPerformed

    private void cmbTitleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbTitleActionPerformed
        // TODO add your handling code here:
        try {
            String prepSQL = "SELECT * FROM BOOK WHERE BOOK_NAME = " + cmbTitle.getSelectedItem();
            rs = dbCon.executeStatement(prepSQL);
            rs.first();
            String bookId = rs.getString("BOOK_ID");
            txtGenre.setText(rs.getString("GENRE"));
            txtLanguage.setText(rs.getString("LANGUAGE"));
            rs = dbCon.executeStatement("SELECT AUTHOR_ID, PUBLISHED_DATE FROM WRITTEN_BY WHERE BOOK_ID = " + bookId);
            rs.first();
            String authorId = rs.getString("AUTHOR_ID");
            txtPublishedDate.setText(rs.getString("PUBLISHED_DATE"));
            rs = dbCon.executeStatement("SELECT AUTHOR_ID, AUTHOR_NAME FROM AUTHOR WHERE AUTHOR_ID = " + authorId);
            rs.first();
            txtAuthorName.setText(rs.getString("AUTHOR_NAME"));
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error adding new book.");
        }
    }//GEN-LAST:event_cmbTitleActionPerformed

    private void btnBorrowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrowActionPerformed
        // TODO add your handling code here:
        try {
            boolean AuthorExists = false;
            int copiesresult = 0;
            // if new employee details are valid, then add new employee to DB
            rs = dbCon.executeStatement("SELECT * FROM BOOK WHERE BOOK_NAME = " + cmbTitle.getSelectedItem());
            rs.first();
            String bookId = rs.getString("BOOK_ID");

            rsCopies = dbCon.executeStatement("SELECT * FROM BOOK_COPIES WHERE BOOK_ID = " + bookId + "ORDER BY COPY_ID DESC");
            rs.first();
            String copyId = rs.getString("COPY_ID");
            String prepSQL = "DELETE BOOK_COPIES WHERE BOOK_ID = " + bookId + " AND COPY_ID = " + copyId;
            copiesresult = dbCon.executePrepared(prepSQL);
            
            rsBorrowed = dbCon.executeStatement("SELECT BORROW_ID FROM BOOK_BORROWED ORDER BY BORROW_ID DESC");
            String borrowId;
            if (rs.isBeforeFirst()) {
                rs.first();
                borrowId = rs.getString("BORROW_ID");
                borrowId = String.valueOf(Integer.parseInt(borrowId) + 1);
            }
            else
                borrowId = "1000";
            
            Date today = new Date();
            
            String dateBorrowed = new SimpleDateFormat("dd-MM-yyyy").format(today);
            
            LocalDate ld = LocalDate.of(today.getYear(), today.getMonth(), today.getDate());
            ld.plusMonths(1);
            Date due = Date.from(ld.atStartOfDay().toInstant(ZoneOffset.UTC));
            
            String dateDue = new SimpleDateFormat("dd-MM-yyyy").format(due);
            String returnStatus = "0";
            String Member_id = txtMemberId.getText().trim();
            
            prepSQL = "INSERT INTO BOOK_BORROWED (BORROW_ID, DATE_BORROWED, DATE_DUE, RETURN_STATUS, MEMBER_ID, COPY_ID, BOOK_ID) VALUES ("
                    + borrowId + ", "
                    + "'" + dateBorrowed + "', "
                    + "'" + dateDue + "', "
                    + returnStatus + ", "
                    + "'" + Member_id + "', "
                    + "'" + copyId + "', "
                    + "'" + bookId + "')";
            
            int borrowedresult = dbCon.executePrepared(prepSQL);

            if (borrowedresult > 0) {
                javax.swing.JLabel label;
                label = new javax.swing.JLabel("Booked Borrowed successfully.");
                label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                JOptionPane.showMessageDialog(null, label, "SUCCESS", JOptionPane.INFORMATION_MESSAGE);
                clearInputBoxes();
            } else {
                javax.swing.JLabel label;
                label = new javax.swing.JLabel("Error! Booked Borrow failed.");
                label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.INFORMATION_MESSAGE);
                clearInputBoxes();
            }
            rs.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error borrowing a book.");
        }
    }//GEN-LAST:event_btnBorrowActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBorrow;
    private javax.swing.JComboBox<String> cmbTitle;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JFormattedTextField txtAuthorName;
    private javax.swing.JTextField txtGenre;
    private javax.swing.JFormattedTextField txtLanguage;
    private javax.swing.JTextField txtMemberId;
    private javax.swing.JFormattedTextField txtPublishedDate;
    // End of variables declaration//GEN-END:variables
}
